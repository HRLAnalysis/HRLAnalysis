/*
    HRLAnalysis(TM) Software License - Version 1.0 - August 27th, 2013

    Permission is hereby granted, free of charge, to any person or 
    organization obtaining a copy of the software and accompanying 
    documentation covered by this license (the "Software") to use, 
    reproduce, display, distribute, execute, and transmit the 
    Software, and to prepare derivative works of the Software, and 
    to permit third-parties to whom the Software is furnished to do 
    so, all subject to the following:

    The copyright notices in the Software and this entire statement, 
    including the above license grant, this restriction and the 
    following disclaimer, must be included in all copies of the 
    Software, in whole or in part, and all derivative works of the 
    Software, unless such copies or derivative works are solely in 
    the form of machine-executable object code generated by a source 
    language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND 
    NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR 
    ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR 
    OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
    OTHER DEALINGS IN THE SOFTWARE, INCLUDING BUT NOT LIMITED TO THE 
    COMPATIBILITY OF THIS LICENSE WITH OTHER SOFTWARE LICENSES.
*/
#include <AnalysisTest.h>

using namespace std;

/* Register this test suite with the factory. */
CPPUNIT_TEST_SUITE_REGISTRATION( AnalysisTest );

void AnalysisTest::setUp() {
}

void AnalysisTest::tearDown() {
}

void AnalysisTest::testConstructor() {
    cout << "AnalysisData::" << endl;
    cout << "\tStart testConstructor..." << endl;
    //Create the data class.
    AnalysisData *data = new AnalysisData();
    // Clean up after yourself
    delete data;
    cout << "\t\tFinish testConstructor." << endl;
}

void AnalysisTest::testGetRasterResult() {
    cout << "\tStart testGetRasterResult..." << endl;

    std::vector<std::string> fileNames;
    hrlAnalysis::RasterInfoPtr rasterResult;

    AnalysisData *data = new AnalysisData();

    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0001.bin") );
    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0002.bin") );

    hrlAnalysis::HrlNeuralAnalysis * spikeStuff = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0,4000,26200,28199,fileNames);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillRasterData( string(CA1_FILE_STR_PREFIX) + string("CA1_raster.dat") ));

    rasterResult = spikeStuff->getSpikeTimes();

    CPPUNIT_ASSERT(data->compareRasterData(rasterResult->time,1));
    CPPUNIT_ASSERT(data->compareRasterData(rasterResult->spikes,2));

    delete data;

    cout << "\t\tFinish testGetRasterResult." << endl;
}

void AnalysisTest::testGetCellRates() {
    cout << "\tStart testGetCellRates..." << endl;
    std::vector<std::string> fileNames;
    hrlAnalysis::CellRateInfoPtr cellRateInfo;
    AnalysisData *data = new AnalysisData();

    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0001.bin") );
    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0002.bin") );

    hrlAnalysis::HrlNeuralAnalysis * spikeStuff = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0,4000,26200,28199,fileNames);

    CPPUNIT_ASSERT(data->fillSpikeRates( string(CA1_FILE_STR_PREFIX) + string("CA1_spike_rates.dat") ));
    cellRateInfo = spikeStuff->getCellRates();

    CPPUNIT_ASSERT(data->compareSpikeRates(cellRateInfo->cells));
    CPPUNIT_ASSERT(data->compareSpikeRates(cellRateInfo->rates));

    CPPUNIT_ASSERT(data->fillSpikeRates( string(CA1_FILE_STR_PREFIX) + string("CA1_spike_rates_bad.dat") ));
    CPPUNIT_ASSERT(data->compareSpikeRates(cellRateInfo->cells));
    CPPUNIT_ASSERT(!data->compareSpikeRates(cellRateInfo->rates));

    cout << "\t\tFinish testGetCellRates." << endl;
}

void AnalysisTest::testGetWindowRates() {
    cout << "\tStart testGetWindowRates..." << endl;
    double rateWindow = 10;
    double step = 10;
    std::vector<std::string> fileNames;
    hrlAnalysis::RateInfoPtr rates;
    AnalysisData *data = new AnalysisData();

    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0001.bin") );
    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0002.bin") );

    hrlAnalysis::HrlNeuralAnalysis * spikeStuff = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0,4000,26200,28199,fileNames);

    CPPUNIT_ASSERT(data->fillWindowRates( string(CA1_FILE_STR_PREFIX) + string("CA1_window_rates.dat") ));
    rates = spikeStuff->getWindowRate(step,rateWindow);
    CPPUNIT_ASSERT(data->compareWindowRates(rates->rates));
    cout << "\t\tFinish testGetWindowRates." << endl;
}

void AnalysisTest::testGetGaussWindowRates() {
    cout << "\tStart testGetGaussWindowRates..." << endl;
    double rateWindow = 10;
    double step = 10;
    hrlAnalysis::RateInfoPtr rates;
    std::vector<std::string> fileNames;
    AnalysisData *data = new AnalysisData();

    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0001.bin") );
    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0002.bin") );

    hrlAnalysis::HrlNeuralAnalysis * spikeStuff = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0,4000,26200,28199,fileNames);

    CPPUNIT_ASSERT(data->fillWindowRates( string(CA1_FILE_STR_PREFIX) + string("CA1_gauss_window_rates.dat") ));
    rates = spikeStuff->getGaussWindowRate(step,rateWindow);
    CPPUNIT_ASSERT(data->compareWindowRates( rates->rates ) );
    cout << "\t\tFinish testGaussWindowRates." << endl;
}

void AnalysisTest::testGetGaussWindowRates2() {
    cout << "\tStart testGetGaussWindowRates2..." << endl;
    double rateWindow = 10;
    double step = 10;
    std::vector<std::string> fileNames;
    hrlAnalysis::RateInfoPtr rates;
    AnalysisData *data = new AnalysisData();

    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0001.bin") );
    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0002.bin") );

    hrlAnalysis::HrlNeuralAnalysis * spikeStuff = new hrlAnalysis::HrlNeuralAnalysisHRLSim(1000,4000,26200,28199,fileNames);

    CPPUNIT_ASSERT(data->fillWindowRates( string(CA1_FILE_STR_PREFIX) + string("CA1_gauss_window_rates.dat") ));
    rates = spikeStuff->getGaussWindowRate(step,rateWindow);
    CPPUNIT_ASSERT(!data->compareWindowRates( rates->rates ) );
    cout << "\t\tFinish testGaussWindowRates2." << endl;
}

void AnalysisTest::testGetRateBins() {
    cout << "\tStart testGetRateBins..." << endl;
    std::vector<std::string> fileNames;
    hrlAnalysis::RateBinInfoPtr binInfo;
    AnalysisData *data = new AnalysisData();

    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0001.bin") );
    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0002.bin") );

    hrlAnalysis::HrlNeuralAnalysis * spikeStuff = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0,4000,26200,28199,fileNames);

    binInfo = spikeStuff->getRateBins(100);
    // Open the test data.
    CPPUNIT_ASSERT(data->fillSpikeBins( string(CA1_FILE_STR_PREFIX) + string("CA1_spike_bins.dat") ));
    CPPUNIT_ASSERT(data->compareSpikeBinsAt(binInfo->counts, 0) );
    CPPUNIT_ASSERT(data->compareSpikeBinsAt(binInfo->counts, 1) );
    delete data;
    cout << "\t\tFinish testGetRateBins." << endl;
}

void AnalysisTest::testGetCellRatesAndBins() {
    cout << "\tStart testGetCellRatesAndBins..." << endl;
    std::vector<std::string> fileNames;
    hrlAnalysis::CellRateBinInfoPtr cellInfo;
    AnalysisData *data = new AnalysisData();

    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0001.bin") );
    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0002.bin") );

    hrlAnalysis::HrlNeuralAnalysis * spikeStuff = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0,4000,26200,28199,fileNames);

    CPPUNIT_ASSERT(data->fillSpikeRates( string(CA1_FILE_STR_PREFIX) + string("CA1_spike_rates.dat") ));
    cellInfo = spikeStuff->getRatesWithBins(100);

    CPPUNIT_ASSERT(data->compareSpikeRates(cellInfo->cells));
    CPPUNIT_ASSERT(data->compareSpikeRates(cellInfo->rates));

    CPPUNIT_ASSERT(data->fillSpikeRates( string(CA1_FILE_STR_PREFIX) + string("CA1_spike_rates_bad.dat") ));
    CPPUNIT_ASSERT(data->compareSpikeRates(cellInfo->cells));
    CPPUNIT_ASSERT(!data->compareSpikeRates(cellInfo->rates));

    CPPUNIT_ASSERT(data->fillSpikeBins( string(CA1_FILE_STR_PREFIX) + string("CA1_spike_bins.dat") ));
    CPPUNIT_ASSERT(data->compareSpikeBinsAt(cellInfo->counts, 0) );
    CPPUNIT_ASSERT(data->compareSpikeBinsAt(cellInfo->counts, 1) );

    cout << "\t\tFinish testCellRatesAndBins." << endl;
}

void AnalysisTest::testGetVoltageResults1() {
    // Test: Full Idx, Full Time
    cout << "\tStart testGetVoltageResults1..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 2000, 0, 61,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_1.dat") ));
    voltageInfo = voltageTest->voltages();
    /*
    for (int i = 0; i < 5; i++)
      std::cout << voltageInfo->voltage[i][0] << " ";
    */

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults1." << endl;
}

void AnalysisTest::testGetVoltageResults2() {
    // Test: Full Idx, beg...mid Time
    cout << "\tStart testGetVoltageResults2..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 1000, 0, 61,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_2.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults2." << endl;
}

void AnalysisTest::testGetVoltageResults3() {
    // Test: Full Idx, mid1..mid2 Time
    cout << "\tStart testGetVoltageResults3..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 1000, 0, 61,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_3.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults3." << endl;
}

void AnalysisTest::testGetVoltageResults4() {
    // Test: Full Idx, mid..end Time
    cout << "\tStart testGetVoltageResults4..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 2000, 0, 61,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_4.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults4." << endl;
}

void AnalysisTest::testGetVoltageResults5() {
    // Test: beg..mid Idx, Full Time
    cout << "\tStart testGetVoltageResults5..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 2000, 0, 30,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_5.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults5." << endl;
}

void AnalysisTest::testGetVoltageResults6() {
    // Test: beg..mid Idx, beg...mid Time
    cout << "\tStart testGetVoltageResults6..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 1000, 0, 30,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_6.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults6." << endl;
}

void AnalysisTest::testGetVoltageResults7() {
    // Test: beg..mid Idx, mid1..mid2 Time
    cout << "\tStart testGetVoltageResults7..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 1000, 0, 30,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_7.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults7." << endl;
}

void AnalysisTest::testGetVoltageResults8() {
    // Test: beg..mid Idx, mid..end Time
    cout << "\tStart testGetVoltageResults8..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 2000, 0, 30,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_8.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults8." << endl;
}

void AnalysisTest::testGetVoltageResults9() {
    // Test: mid1..mid2 Idx, Full Time
    cout << "\tStart testGetVoltageResults9..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 2000, 15, 30,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_9.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults9." << endl;
}

void AnalysisTest::testGetVoltageResults10() {
    // Test: mid1..mid2 Idx, beg...mid Time
    cout << "\tStart testGetVoltageResults10..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 1000, 15, 30,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_10.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults10." << endl;
}

void AnalysisTest::testGetVoltageResults11() {
    // Test: mid1..mid2 Idx, mid1..mid2 Time
    cout << "\tStart testGetVoltageResults11..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 1000, 15, 30,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_11.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults11." << endl;
}

void AnalysisTest::testGetVoltageResults12() {
    // Test: mid1..mid2 Idx, mid..end Time
    cout << "\tStart testGetVoltageResults12..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 2000, 15, 30,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_12.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults12." << endl;
}

void AnalysisTest::testGetVoltageResults13() {
    // Test: mid..end Idx, Full Time
    cout << "\tStart testGetVoltageResults13..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 2000, 30, 61,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_13.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults13." << endl;
}

void AnalysisTest::testGetVoltageResults14() {
    // Test: mid..end Idx, beg...mid Time
    cout << "\tStart testGetVoltageResults14..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 1000, 30, 61,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_14.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults14." << endl;
}

void AnalysisTest::testGetVoltageResults15() {
    // Test: mid..end Idx, mid1..mid2 Time
    cout << "\tStart testGetVoltageResults15..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 1000, 30, 61,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_15.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults15." << endl;
}

void AnalysisTest::testGetVoltageResults16() {
    // Test: mid..end Idx, mid..end Time
    cout << "\tStart testGetVoltageResults16..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 2000, 30, 61,fileNames,62,false,-49.0);

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_16.dat") ));
    voltageInfo = voltageTest->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));

    delete data;

    cout << "\t\tFinish testGetVoltageResults16." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults1() {
    // Test: Full Idx, Full Time
    cout << "\tStart testGetVoltageSpikeResults1..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(4, 2000, 0, 61,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(4, 2000, 0, 61,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
 
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults1." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults2() {
    // Test: Full Idx, beg...mid Time
    cout << "\tStart testGetVoltageSpikeResults2..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 1000, 0, 61,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0, 1000, 0, 61,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults2." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults3() {
    // Test: Full Idx, mid1..mid2 Time
    cout << "\tStart testGetVoltageSpikeResults3..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 1000, 0, 61,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(500, 1000, 0, 61,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults3." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults4() {
    // Test: Full Idx, mid..end Time
    cout << "\tStart testGetVoltageSpikeResults4..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 2000, 0, 61,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(500, 2000, 0, 61,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults4." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults5() {
    // Test: beg..mid Idx, Full Time
    cout << "\tStart testGetVoltageSpikeResults5..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 2000, 0, 30,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0, 2000, 0, 30,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults5." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults6() {
    // Test: beg..mid Idx, beg...mid Time
    cout << "\tStart testGetVoltageSpikeResults6..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 1000, 0, 30,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0, 1000, 0, 30,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults6." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults7() {
    // Test: beg..mid Idx, mid1..mid2 Time
    cout << "\tStart testGetVoltageSpikeResults7..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 1000, 0, 30,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(500, 1000, 0, 30,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults7." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults8() {
    // Test: beg..mid Idx, mid..end Time
    cout << "\tStart testGetVoltageSpikeResults8..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 2000, 0, 30,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(500, 2000, 0, 30,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults8." << endl;
}



void AnalysisTest::testGetVoltageSpikeResults9() {
    // Test: mid1..mid2 Idx, Full Time
    cout << "\tStart testGetVoltageSpikeResults9..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 2000, 15, 30,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0, 2000, 15, 30,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults9." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults10() {
    // Test: mid1..mid2 Idx, beg...mid Time
    cout << "\tStart testGetVoltageSpikeResults10..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 1000, 15, 30,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0, 1000, 15, 30,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults10." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults11() {
    // Test: mid1..mid2 Idx, mid1..mid2 Time
    cout << "\tStart testGetVoltageSpikeResults11..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 1000, 15, 30,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(500, 1000, 15, 30,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults11." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults12() {
    // Test: mid1..mid2 Idx, mid..end Time
    cout << "\tStart testGetVoltageSpikeResults12..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 2000, 15, 30,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(500, 2000, 15, 30,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults12." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults13() {
    // Test: mid..end Idx, Full Time
    cout << "\tStart testGetVoltageSpikeResults13..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 2000, 30, 61,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0, 2000, 30, 61,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults13." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults14() {
    // Test: mid..end Idx, beg...mid Time
    cout << "\tStart testGetVoltageSpikeResults14..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 1000, 30, 61,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0, 1000, 30, 61,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults14." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults15() {
    // Test: mid..end Idx, mid1..mid2 Time
    cout << "\tStart testGetVoltageSpikeResults15..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 1000, 30, 61,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(500, 1000, 30, 61,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults15." << endl;
}

void AnalysisTest::testGetVoltageSpikeResults16() {
    // Test: mid..end Idx, mid..end Time
    cout << "\tStart testGetVoltageSpikeResults16..." << endl;

    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> voltFileNames;
    std::vector<std::string> spikeFileNames;

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      voltFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
      snprintf(file, 100, "spikes_%04d.bin", i);
      spikeFileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltage * voltageTest = new hrlAnalysis::HrlNeuralAnalysisVoltage(500, 2000, 30, 61,voltFileNames,62,true,-49.0);
    voltageTest->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr voltToSpikeActivity = voltageTest->spikeActivity();
    hrlAnalysis::CellActivityPtr voltToCellActivity = voltageTest->cellActivity();

    hrlAnalysis::HrlNeuralAnalysisHRLSim * spikeResults = new hrlAnalysis::HrlNeuralAnalysisHRLSim(500, 2000, 30, 61,spikeFileNames);
    spikeResults->buildDataStructures();

    hrlAnalysis::SpikeActivityPtr spikeActivity = spikeResults->spikeActivity();
    hrlAnalysis::CellActivityPtr cellActivity = spikeResults->cellActivity();
    
    // Open the test data.
    CPPUNIT_ASSERT(*spikeActivity == *voltToSpikeActivity);
    CPPUNIT_ASSERT(*cellActivity == *voltToCellActivity);

    delete spikeResults;
    delete voltageTest;

    cout << "\t\tFinish testGetVoltageSpikeResults16." << endl;
}

void AnalysisTest::testGetCOV() {
    cout << "\tStart testGetCOV..." << endl;
    std::vector<std::string> fileNames;
    hrlAnalysis::CovInfoPtr covInfo;
    AnalysisData *data = new AnalysisData();

    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0001.bin") );
    fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0002.bin") );

    hrlAnalysis::HrlNeuralAnalysis * spikeStuff = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0,4000,26200,28199,fileNames);

    CPPUNIT_ASSERT(data->fillCOV( string(CA1_FILE_STR_PREFIX) + string("CA1_cov.dat") ));
    covInfo = spikeStuff->getCOV();

    CPPUNIT_ASSERT(data->compareCOV(covInfo->cov));

    cout << "\t\tFinish testCOV." << endl;
}

void AnalysisTest::testSurpriseValue() {
    cout << "\tStart testSurpriseValue..." << endl;
    std::vector<std::string> fileNames;
    hrlAnalysis::HrlNeuralAnalysis * spikeStuff = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0,4000,26200,28199,fileNames);
    double S = spikeStuff->calcSurprise(100,10,0.01);
    CPPUNIT_ASSERT( fabs(S-16.0099098) < 0.0000001);

    S = spikeStuff->calcSurprise(100,10,0.04);
    CPPUNIT_ASSERT( fabs(S-4.8119185) < 0.0000001);

    S = spikeStuff->calcSurprise(100,50,0.04);
    CPPUNIT_ASSERT( fabs(S-35.6381883) < 0.0000001);

    S = spikeStuff->calcSurprise(100,7,0.1);
    CPPUNIT_ASSERT( fabs(S-0.1394246) < 0.0000001);

    S = spikeStuff->calcSurprise(5,1,1);
    CPPUNIT_ASSERT( fabs(S-0.0067607) < 0.0000001);

    cout << "\t\tFinish testSurpriseValue." << endl;
}

// These are to test our tester class AnalysisData (seems redundant)
void AnalysisTest::testAnalysisIntData() {
    cout << "\tStart testAnalysisData..." << endl;

    AnalysisData *data = new AnalysisData();
    CPPUNIT_ASSERT(data->fillRasterData( string(CA1_FILE_STR_PREFIX) + string("CA1_raster_short.dat") ));    
        
    // Create and Fill our fake array.
    std::vector<std::pair<int,int> > rasterData;
    rasterData.push_back(make_pair(1095,27539));
    rasterData.push_back(make_pair(1104,26797));
    rasterData.push_back(make_pair(1106,27096));
    rasterData.push_back(make_pair(1106,27587));
    rasterData.push_back(make_pair(1109,26323));
    rasterData.push_back(make_pair(1109,26590));
    rasterData.push_back(make_pair(1110,27119));
    rasterData.push_back(make_pair(1110,27338));
    rasterData.push_back(make_pair(1110,28089));
    
    // Should fail due to lengths
    CPPUNIT_ASSERT(!data->compareRasterData(rasterData));
    
    // Should fail due to time mismatch
    rasterData.push_back(make_pair(1110,26597));
    CPPUNIT_ASSERT(!data->compareRasterData(rasterData));
    
    // Should fail due to data mismatch
    rasterData.pop_back();
    rasterData.push_back(make_pair(1111,26598));
    CPPUNIT_ASSERT(!data->compareRasterData(rasterData));
    
    // Should match
    rasterData.pop_back();
    rasterData.push_back(make_pair(1111,26597));        
    CPPUNIT_ASSERT(data->compareRasterData(rasterData));
    
    //data->dumpRaster();
    
    delete data;
    
    cout << "\t\tFinish testAnalysisData." << endl;
    
}

void AnalysisTest::testAnalysisDblData() {
    cout << "\tStart testAnalysisData..." << endl;

    AnalysisData *data = new AnalysisData();
    CPPUNIT_ASSERT(data->fillSpikeRates( string(CA1_FILE_STR_PREFIX) + string("CA1_spike_rates_short.dat") ));    
        
    // Create and Fill our fake array.
    std::vector<std::pair<int,double> > spikeRateData;
    spikeRateData.push_back(make_pair(26200,1.25));
    spikeRateData.push_back(make_pair(26201,1.25));
    spikeRateData.push_back(make_pair(26202,0.0));
    spikeRateData.push_back(make_pair(26203,0.0));
    spikeRateData.push_back(make_pair(26204,0.0));
    spikeRateData.push_back(make_pair(26205,0.0));
    spikeRateData.push_back(make_pair(26206,0.0));
    spikeRateData.push_back(make_pair(26207,0.0));
    spikeRateData.push_back(make_pair(26208,0.0));
        
    // Should fail due to lengths
    CPPUNIT_ASSERT(!data->compareSpikeRates(spikeRateData));
    
    // Should fail due to cell mismatch
    spikeRateData.push_back(make_pair(26209, 2.25));
    CPPUNIT_ASSERT(!data->compareSpikeRates(spikeRateData));
    
    // Should fail due to data mismatch
    spikeRateData.pop_back();
    spikeRateData.push_back(make_pair(26210, 2.261));
    CPPUNIT_ASSERT(!data->compareSpikeRates(spikeRateData));
    
    // Should Match
    spikeRateData.pop_back();
    spikeRateData.push_back(make_pair(26210, 2.255));
    CPPUNIT_ASSERT(data->compareSpikeRates(spikeRateData));
    
    // Should Match
    spikeRateData.pop_back();
    spikeRateData.push_back(make_pair(26210, 2.25));
    CPPUNIT_ASSERT(data->compareSpikeRates(spikeRateData));
            
    delete data;
    
    cout << "\t\tFinish testAnalysisData." << endl;
    
}

void AnalysisTest::testAnalysisIntData2() {
    cout << "\tStart testAnalysisData2..." << endl;

    AnalysisData *data = new AnalysisData();
    CPPUNIT_ASSERT(data->fillRasterData( string(CA1_FILE_STR_PREFIX) + string("CA1_raster_short.dat") ));    
        
    // Create and Fill our fake array.
    std::vector<int> rasterData;
    std::vector<int> rasterTime;
    rasterTime.push_back(1095);
    rasterTime.push_back(1104);
    rasterTime.push_back(1106);
    rasterTime.push_back(1106);
    rasterTime.push_back(1109);
    rasterTime.push_back(1109);
    rasterTime.push_back(1110);
    rasterTime.push_back(1110);
    rasterTime.push_back(1110);
    
    rasterData.push_back(27539);
    rasterData.push_back(26797);
    rasterData.push_back(27096);
    rasterData.push_back(27587);
    rasterData.push_back(26323);
    rasterData.push_back(26590);
    rasterData.push_back(27119);
    rasterData.push_back(27338);
    rasterData.push_back(28089);
    
    // Should fail due to lengths
    CPPUNIT_ASSERT(!data->compareRasterData(rasterTime,1));
    CPPUNIT_ASSERT(!data->compareRasterData(rasterData,2));
    
    // Should fail due to time mismatch
    rasterTime.push_back(1110);
    rasterData.push_back(26597);
    CPPUNIT_ASSERT(!data->compareRasterData(rasterTime, 1));
    CPPUNIT_ASSERT(data->compareRasterData(rasterData, 2));
    
    // Should fail due to data mismatch
    rasterData.pop_back();
    rasterTime.pop_back();
    rasterTime.push_back(1111);
    rasterData.push_back(26598);
    CPPUNIT_ASSERT(data->compareRasterData(rasterTime, 1));
    CPPUNIT_ASSERT(!data->compareRasterData(rasterData, 2));
    
    // Should match
    rasterData.pop_back();
    rasterTime.pop_back();
    rasterTime.push_back(1111);
    rasterData.push_back(26597);
    CPPUNIT_ASSERT(data->compareRasterData(rasterTime, 1));
    CPPUNIT_ASSERT(data->compareRasterData(rasterData, 2));
    
    delete data;
    
    cout << "\t\tFinish testAnalysisData2." << endl;
    
}

void AnalysisTest::testAnalysisDblData2() {
    cout << "\tStart testAnalysisData2..." << endl;

    AnalysisData *data = new AnalysisData();
    CPPUNIT_ASSERT(data->fillSpikeRates( string(CA1_FILE_STR_PREFIX) + string("CA1_spike_rates_short.dat") ));    
        
    // Create and Fill our fake array.
    std::vector<double> spikeRateData;
    std::vector<int> cells;
    cells.push_back(26200);
    cells.push_back(26201);
    cells.push_back(26202);
    cells.push_back(26203);
    cells.push_back(26204);
    cells.push_back(26205);
    cells.push_back(26206);
    cells.push_back(26207);
    cells.push_back(26208);

    spikeRateData.push_back(1.25);
    spikeRateData.push_back(1.25);
    spikeRateData.push_back(0.0);
    spikeRateData.push_back(0.0);
    spikeRateData.push_back(0.0);
    spikeRateData.push_back(0.0);
    spikeRateData.push_back(0.0);
    spikeRateData.push_back(0.0);
    spikeRateData.push_back(0.0);        
        
    // Should fail due to lengths
    CPPUNIT_ASSERT(!data->compareSpikeRates(spikeRateData));
    CPPUNIT_ASSERT(!data->compareSpikeRates(cells));
        
    spikeRateData.push_back(2.25);
    cells.push_back(26209);
    CPPUNIT_ASSERT(data->compareSpikeRates(spikeRateData));
    // Should fail due to cell mismatch
    CPPUNIT_ASSERT(!data->compareSpikeRates(cells));
    
    
    spikeRateData.pop_back();
    cells.pop_back();
    spikeRateData.push_back(2.261);
    cells.push_back(26210);
    // Should fail due to data mismatch
    CPPUNIT_ASSERT(!data->compareSpikeRates(spikeRateData));
    CPPUNIT_ASSERT(data->compareSpikeRates(cells));
    
    // Should Match
    spikeRateData.pop_back();
    cells.pop_back();
    spikeRateData.push_back(2.255);
    cells.push_back(26210);
    CPPUNIT_ASSERT(data->compareSpikeRates(spikeRateData));
    CPPUNIT_ASSERT(data->compareSpikeRates(cells));
    
    // Should Match
    spikeRateData.pop_back();
    cells.pop_back();
    spikeRateData.push_back(2.25);
    cells.push_back(26210);
    CPPUNIT_ASSERT(data->compareSpikeRates(spikeRateData));
    CPPUNIT_ASSERT(data->compareSpikeRates(cells));
                    
    delete data;
    
    cout << "\t\tFinish testAnalysisData2." << endl;
    
}

void AnalysisTest::testGetBurstAnalysis() {
    cout << "\tStart testGetBurstAnalysis..." << endl;
    std::vector<std::string> fileNames;
    hrlAnalysis::PopulationBurstingInfoPtr burstResults;
    AnalysisData *data = new AnalysisData();

    fileNames.push_back( string(BURST_NORMAL_FILE_STR_PREFIX) + string("spikes_0001.bin") );
    fileNames.push_back( string(BURST_NORMAL_FILE_STR_PREFIX) + string("spikes_0002.bin") );
    fileNames.push_back( string(BURST_NORMAL_FILE_STR_PREFIX) + string("spikes_0003.bin") );

    hrlAnalysis::HrlNeuralAnalysis * spikeStuff = new hrlAnalysis::HrlNeuralAnalysisHRLSim(0,3000,19,34,fileNames);

    burstResults = spikeStuff->getBursting(0.01);

    // Look at Cell 19
    CPPUNIT_ASSERT( (burstResults->at(0)).at(0).start == 1 );
    CPPUNIT_ASSERT( (burstResults->at(0)).at(0).stop == 17 );
    CPPUNIT_ASSERT( ( (burstResults->at(0)).at(0).surprise - 12.67) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(0)).at(1).start == 331 );
    CPPUNIT_ASSERT( (burstResults->at(0)).at(1).stop == 348 );
    CPPUNIT_ASSERT( ( (burstResults->at(0)).at(1).surprise - 6.05) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(0)).at(2).start == 896 );
    CPPUNIT_ASSERT( (burstResults->at(0)).at(2).stop == 970 );
    CPPUNIT_ASSERT( ( (burstResults->at(0)).at(2).surprise - 4.94) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(0)).at(3).start == 1099 );
    CPPUNIT_ASSERT( (burstResults->at(0)).at(3).stop == 1124 );
    CPPUNIT_ASSERT( ( (burstResults->at(0)).at(3).surprise - 6.01) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(0)).at(4).start == 1663 );
    CPPUNIT_ASSERT( (burstResults->at(0)).at(4).stop == 1685 );
    CPPUNIT_ASSERT( ( (burstResults->at(0)).at(4).surprise - 6.65) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(0)).at(5).start == 1720 );
    CPPUNIT_ASSERT( (burstResults->at(0)).at(5).stop == 1742 );
    CPPUNIT_ASSERT( ( (burstResults->at(0)).at(5).surprise - 4.98) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(0)).at(6).start == 2097 );
    CPPUNIT_ASSERT( (burstResults->at(0)).at(6).stop == 2104 );
    CPPUNIT_ASSERT( ( (burstResults->at(0)).at(6).surprise - 5.04) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(0)).at(7).start == 2234 );
    CPPUNIT_ASSERT( (burstResults->at(0)).at(7).stop == 2266 );
    CPPUNIT_ASSERT( ( (burstResults->at(0)).at(7).surprise - 4.84) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(0)).at(8).start == 2408 );
    CPPUNIT_ASSERT( (burstResults->at(0)).at(8).stop == 2441 );
    CPPUNIT_ASSERT( ( (burstResults->at(0)).at(8).surprise - 6.12) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(0)).at(9).start == 2802 );
    CPPUNIT_ASSERT( (burstResults->at(0)).at(9).stop == 2822 );
    CPPUNIT_ASSERT( ( (burstResults->at(0)).at(9).surprise - 5.37) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(0)).at(10).start == 2863 );
    CPPUNIT_ASSERT( (burstResults->at(0)).at(10).stop == 2871 );
    CPPUNIT_ASSERT( ( (burstResults->at(0)).at(10).surprise - 4.68) < 0.01  );


    //Cell 25
    CPPUNIT_ASSERT( (burstResults->at(6)).at(0).start == 1 );
    CPPUNIT_ASSERT( (burstResults->at(6)).at(0).stop == 16 );
    CPPUNIT_ASSERT( ( (burstResults->at(6)).at(0).surprise - 13.33) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(6)).at(1).start == 756 );
    CPPUNIT_ASSERT( (burstResults->at(6)).at(1).stop == 770 );
    CPPUNIT_ASSERT( ( (burstResults->at(6)).at(1).surprise - 5.04) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(6)).at(2).start == 810 );
    CPPUNIT_ASSERT( (burstResults->at(6)).at(2).stop == 821 );
    CPPUNIT_ASSERT( ( (burstResults->at(6)).at(2).surprise - 5.88) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(6)).at(3).start == 1183 );
    CPPUNIT_ASSERT( (burstResults->at(6)).at(3).stop == 1204 );
    CPPUNIT_ASSERT( ( (burstResults->at(6)).at(3).surprise - 5.27) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(6)).at(4).start == 1238 );
    CPPUNIT_ASSERT( (burstResults->at(6)).at(4).stop == 1260 );
    CPPUNIT_ASSERT( ( (burstResults->at(6)).at(4).surprise - 5.08) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(6)).at(5).start == 1516 );
    CPPUNIT_ASSERT( (burstResults->at(6)).at(5).stop == 1532 );
    CPPUNIT_ASSERT( ( (burstResults->at(6)).at(5).surprise - 6.42) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(6)).at(6).start == 2621 );
    CPPUNIT_ASSERT( (burstResults->at(6)).at(6).stop == 2645 );
    CPPUNIT_ASSERT( ( (burstResults->at(6)).at(6).surprise - 7.73) < 0.01  );



    CPPUNIT_ASSERT( (burstResults->at(11)).at(0).start == 1 );
    CPPUNIT_ASSERT( (burstResults->at(11)).at(0).stop == 18 );
    CPPUNIT_ASSERT( ( (burstResults->at(11)).at(0).surprise - 12.90) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(11)).at(1).start == 63 );
    CPPUNIT_ASSERT( (burstResults->at(11)).at(1).stop == 123 );
    CPPUNIT_ASSERT( ( (burstResults->at(11)).at(1).surprise - 7.06) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(11)).at(2).start == 428 );
    CPPUNIT_ASSERT( (burstResults->at(11)).at(2).stop == 442 );
    CPPUNIT_ASSERT( ( (burstResults->at(11)).at(2).surprise - 5.28) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(11)).at(3).start == 478 );
    CPPUNIT_ASSERT( (burstResults->at(11)).at(3).stop == 489 );
    CPPUNIT_ASSERT( ( (burstResults->at(11)).at(3).surprise - 6.13) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(11)).at(4).start == 660 );
    CPPUNIT_ASSERT( (burstResults->at(11)).at(4).stop == 667 );
    CPPUNIT_ASSERT( ( (burstResults->at(11)).at(4).surprise - 5.29) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(11)).at(5).start == 1218 );
    CPPUNIT_ASSERT( (burstResults->at(11)).at(5).stop == 1231 );
    CPPUNIT_ASSERT( ( (burstResults->at(11)).at(5).surprise - 5.53) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(11)).at(6).start == 1286 );
    CPPUNIT_ASSERT( (burstResults->at(11)).at(6).stop == 1294 );
    CPPUNIT_ASSERT( ( (burstResults->at(11)).at(6).surprise - 4.93) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(11)).at(7).start == 2577 );
    CPPUNIT_ASSERT( (burstResults->at(11)).at(7).stop == 2592 );
    CPPUNIT_ASSERT( ( (burstResults->at(11)).at(7).surprise - 5.04) < 0.01  );

    CPPUNIT_ASSERT( (burstResults->at(11)).at(8).start == 2747 );
    CPPUNIT_ASSERT( (burstResults->at(11)).at(8).stop == 2756 );
    CPPUNIT_ASSERT( ( (burstResults->at(11)).at(8).surprise - 4.61) < 0.01  );

    cout << "\t\tFinish testBurstAnalysis." << endl;
}

void AnalysisTest::testGetSPIKESynchrony() {
    cout << "\tStart testGetSPIKESynchrony..." << endl;

    std::vector<std::string> fileNames;
    hrlAnalysis::SpikeAnalysisAccess spikeAnalysis(0,1300,0,1,fileNames,2);

    // Fill in the spike information.
    int temp1[] = {100,200,300,400,500,600,700,800,900,1000,1100,1200};
    int temp2[] = {100,210,320,430,540,650,760,870,980,1090,1200};

    for(int i = 0; i < 12; i++) {
        spikeAnalysis.cellActivityAccess_->at(0).push_back(temp1[i]);
    }

    for(int i = 0; i < 11; i++) {
        spikeAnalysis.cellActivityAccess_->at(1).push_back(temp2[i]);
    }

    spikeAnalysis.paramsInAccess_->isDataCompiled = true;

    hrlAnalysis::SynchronyInfoPtr synchronyInfo;
    synchronyInfo = spikeAnalysis.getPairSynchrony(0,1);

    // load the comparison data
    std::vector<double> S_in;
    double tempS;

    ifstream fpIn(SYNCH_FILE_DATA1, ios::in);
    int count = 1;
    if(!fpIn.fail()) {
        while(fpIn.good()) {
            fpIn >> tempS;
            if(!fpIn.eof()) {
                S_in.push_back(tempS);
            }
        }
    }
    fpIn.close();

    CPPUNIT_ASSERT_EQUAL(synchronyInfo->S.size(), S_in.size());

    int sSize = synchronyInfo->S.size();
    for(int i = 0; i < sSize; i ++) {
        //cout << "i: " << i << " sVal: " << synchronyInfo->S.at(i) << " values[i]: " << S_in.at(i) << endl;
        CPPUNIT_ASSERT( fabs(synchronyInfo->S.at(i)-S_in.at(i)) < 0.00000001);
    }

    CPPUNIT_ASSERT( fabs(spikeAnalysis.calcSPIKEDistance(synchronyInfo)-0.274376) < 0.000001 );
    CPPUNIT_ASSERT( fabs(spikeAnalysis.calcSPIKEDistanceAvg(synchronyInfo)-0.211059) < 0.000001 );

    cout << "\t\tFinish testSPIKESynchrony." << endl;
}

void AnalysisTest::testGetSPIKESynchrony2() {
    cout << "\tStart testGetSPIKESynchrony2..." << endl;

    std::vector<std::string> fileNames;
    hrlAnalysis::SpikeAnalysisAccess spikeAnalysis(0,1300,0,1,fileNames,2);

    // Fill in the spike information.
    spikeAnalysis.cellActivityAccess_->at(0).push_back(100);
    spikeAnalysis.cellActivityAccess_->at(1).push_back(100);
    spikeAnalysis.paramsInAccess_->isDataCompiled = true;

    hrlAnalysis::SynchronyInfoPtr synchronyInfo;
    synchronyInfo = spikeAnalysis.getPairSynchrony(0,1);

    // load the comparison data
    std::vector<double> S_in;
    double tempS;

    for(int i=0; i<1300; i++)
        S_in.push_back(0);

    CPPUNIT_ASSERT_EQUAL(synchronyInfo->S.size(), S_in.size());

    int sSize = synchronyInfo->S.size();
    for(int i = 0; i < sSize; i ++) {
        //cout << "i: " << i << " sVal: " << synchronyInfo->S.at(i) << " values[i]: " << S_in.at(i) << endl;
        CPPUNIT_ASSERT( fabs(synchronyInfo->S.at(i)-S_in.at(i)) < 0.00000001);
    }

    cout << "\t\tFinish testSPIKESynchrony2." << endl;
}

#if INCLUDE_SERIALIZATION
void AnalysisTest::testSerialize() {
	cout << "\tStart testSerialize..." << endl;

	std::vector<std::string> fileNames;
	hrlAnalysis::RasterInfoPtr rasterResult;

	AnalysisData *data = new AnalysisData();

	fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0001.bin") );
	fileNames.push_back( string(CA1_FILE_STR_PREFIX) + string("spikes_0002.bin") );

	hrlAnalysis::HrlNeuralAnalysisPtr spikeStuffOut(new hrlAnalysis::HrlNeuralAnalysisHRLSim(0,4000,26200,28199,fileNames));
	spikeStuffOut->buildDataStructures();
	spikeStuffOut->save((string(SERIALIZE_FILE_STR_PREFIX) + string("ser.bin")) );

	hrlAnalysis::HrlNeuralAnalysisPtr spikeStuffIn(new hrlAnalysis::HrlNeuralAnalysisHRLSim());
	spikeStuffIn->load(string(SERIALIZE_FILE_STR_PREFIX) + string("ser.bin"));

	// Open the test data.
	CPPUNIT_ASSERT(data->fillRasterData( string(CA1_FILE_STR_PREFIX) + string("CA1_raster.dat") ));
	rasterResult = spikeStuffIn->getSpikeTimes();

	CPPUNIT_ASSERT(data->compareRasterData(rasterResult->time,1));
	CPPUNIT_ASSERT(data->compareRasterData(rasterResult->spikes,2));

	delete data;

	cout << "\t\tFinish testSerialize." << endl;

}

void AnalysisTest::testSerializeVoltage() {
    cout << "\tStart testSerializeVoltage..." << endl;
    float tol = 0.0001; // tolerance for voltage error
    std::vector<std::string> fileNames;
    hrlAnalysis::VoltageInfoPtr voltageInfo;
    AnalysisData *data = new AnalysisData();

    for (int i = 1; i < 21; i++) {
      char file[100];
      snprintf(file, 100, "voltages_%04d.dat", i);
      fileNames.push_back( string(VOLT_FILE_STR_PREFIX) + string(file) );
    }

    hrlAnalysis::HrlNeuralAnalysisVoltagePtr voltageTestOut(new hrlAnalysis::HrlNeuralAnalysisVoltage(0, 2000, 0, 61,fileNames,62,false,-49.0));
    voltageTestOut->buildDataStructures();
    voltageTestOut->save((string(SERIALIZE_FILE_STR_PREFIX) + string("voltage.bin")) );

    hrlAnalysis::HrlNeuralAnalysisVoltagePtr voltageTestIn(new hrlAnalysis::HrlNeuralAnalysisVoltage());
	voltageTestIn->load((string(SERIALIZE_FILE_STR_PREFIX) + string("voltage.bin")) );

    // Open the test data.
    CPPUNIT_ASSERT(data->fillVoltageData( string(VOLT_FILE_STR_PREFIX) + string("VOLT_TEST_1.dat") ));
    voltageInfo = voltageTestIn->voltages();

    CPPUNIT_ASSERT(data->compareVoltageData(voltageInfo->voltage, tol));
    delete data;

    cout << "\t\tFinish testSerializeVoltage." << endl;

}

#endif

void AnalysisTest::testgetPairwisePearsons() {
	cout << "\tStart testgetPairwisePearsons..." << endl;

	std::vector<std::string> fileNames;
	hrlAnalysis::SpikeAnalysisAccess spikeAnalysis(0,1300,0,1,fileNames,4);

	// Fill in the spike information.
	int temp1[] = {100,200,300,400,500,600,700,800,900,1000,1100,1200};
	int temp2[] = {100,210,320,430,540,650,760,870,980,1090,1200};
	int temp3[] = {300,305,400,500};
	int temp4[] = {200,250,275,600,625,1200};

	for(int i = 0; i < 12; i++) {
		spikeAnalysis.cellActivityAccess_->at(0).push_back(temp1[i]);
	}

	for(int i = 0; i < 11; i++) {
		spikeAnalysis.cellActivityAccess_->at(1).push_back(temp2[i]);
	}

	for(int i = 0; i < 4; i++) {
		spikeAnalysis.cellActivityAccess_->at(2).push_back(temp3[i]);
	}

	for(int i = 0; i < 6; i++) {
		spikeAnalysis.cellActivityAccess_->at(3).push_back(temp4[i]);
	}

	spikeAnalysis.paramsInAccess_->isDataCompiled = true;

	CPPUNIT_ASSERT( fabs(spikeAnalysis.getPairwisePearsons(0,1,100)-0.6770032) < 0.000001 );
	CPPUNIT_ASSERT( fabs(spikeAnalysis.getPairwisePearsons(0,2,100)-0.14664712) < 0.000001 );
	CPPUNIT_ASSERT( fabs(spikeAnalysis.getPairwisePearsons(0,3,100)-0.14334554) < 0.000001 );
	CPPUNIT_ASSERT( fabs(spikeAnalysis.getPairwisePearsons(1,2,100)-0.21661214) < 0.000001 );
	CPPUNIT_ASSERT( fabs(spikeAnalysis.getPairwisePearsons(1,3,100)-0.2117354) < 0.000001 );
	CPPUNIT_ASSERT( fabs(spikeAnalysis.getPairwisePearsons(2,3,100)- (-0.25225453)) < 0.000001 );
	cout << "\t\tFinish testgetPairwisePearsons." << endl;
}

void AnalysisTest::testgetAllPairsPearsons() {
	cout << "\tStart testgetAllPairsPearsons..." << endl;

	std::vector<std::string> fileNames;
	hrlAnalysis::SpikeAnalysisAccess spikeAnalysis(0,1300,0,3,fileNames,4);

	// Fill in the spike information.
	int temp1[] = {100,200,300,400,500,600,700,800,900,1000,1100,1200};
	int temp2[] = {100,210,320,430,540,650,760,870,980,1090,1200};
	int temp3[] = {300,305,400,500};
	int temp4[] = {200,250,275,600,625,1200};

	for(int i = 0; i < 12; i++) {
		spikeAnalysis.cellActivityAccess_->at(0).push_back(temp1[i]);
	}

	for(int i = 0; i < 11; i++) {
		spikeAnalysis.cellActivityAccess_->at(1).push_back(temp2[i]);
	}

	for(int i = 0; i < 4; i++) {
		spikeAnalysis.cellActivityAccess_->at(2).push_back(temp3[i]);
	}

	for(int i = 0; i < 6; i++) {
		spikeAnalysis.cellActivityAccess_->at(3).push_back(temp4[i]);
	}

	spikeAnalysis.paramsInAccess_->isDataCompiled = true;

	hrlAnalysis::CorrelationInfoPtr correlationInfo = spikeAnalysis.getAllPairsPearsons(100);

	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(0).at(1)-0.6770032) < 0.000001 );
	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(0).at(2)-0.14664712) < 0.000001 );
	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(0).at(3)-0.14334554) < 0.000001 );
	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(1).at(2)-0.21661214) < 0.000001 );
	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(1).at(3)-0.2117354) < 0.000001 );
	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(2).at(3)- (-0.25225453)) < 0.000001 );

	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(1).at(0)-0.6770032) < 0.000001 );
	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(2).at(0)-0.14664712) < 0.000001 );
	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(3).at(0)-0.14334554) < 0.000001 );
	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(2).at(1)-0.21661214) < 0.000001 );
	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(3).at(1)-0.2117354) < 0.000001 );
	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(3).at(2)- (-0.25225453)) < 0.000001 );

	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(0).at(0)-1.0) < 0.000001 );
	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(1).at(1)-1.0) < 0.000001 );
	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(2).at(2)-1.0) < 0.000001 );
	CPPUNIT_ASSERT( fabs(correlationInfo->corrs.at(3).at(3)-1.0) < 0.000001 );


	cout << "\t\tFinish testgetAllPairsPearsons." << endl;


}

void AnalysisTest::testFilter() {
	cout << "\tStart testFilter..." << endl;
	std::vector<std::string> fileNames;
	double tol = 0.0001; // tolerance for voltage error
	////////////////////////////////////////////////////////////////////////////////
	// Population 1
	////////////////////////////////////////////////////////////////////////////////
	hrlAnalysis::SpikeAnalysisAccess spikeAnalysis1(0,500,0,5,fileNames,6);
	// Fill in the spike information.
	int temp1[] = {54,145,170};
	int temp2[] = {282,309,368,402};
	for(int i = 0; i < 3; i++) {
		spikeAnalysis1.cellActivityAccess_->at(0).push_back(temp1[i]);
	}
	for(int i = 0; i < 4; i++) {
		spikeAnalysis1.cellActivityAccess_->at(1).push_back(temp2[i]);
	}
	spikeAnalysis1.paramsInAccess_->isDataCompiled = true;
	hrlAnalysis::PopFilterInfoPtr info1 = spikeAnalysis1.filterPopGauss(30);

	////////////////////////////////////////////////////////////////////////////////
	// Population 2
	////////////////////////////////////////////////////////////////////////////////
	hrlAnalysis::SpikeAnalysisAccess spikeAnalysis2(0,500,0,5,fileNames,6);
	// Fill in the spike information.
	int temp3[] = {42,199,305,331,371,391,412};
	int temp4[] = {216,238,380};
	for(int i = 0; i < 7; i++) {
		spikeAnalysis2.cellActivityAccess_->at(0).push_back(temp3[i]);
	}
	for(int i = 0; i < 3; i++) {
		spikeAnalysis2.cellActivityAccess_->at(4).push_back(temp4[i]);
	}
	spikeAnalysis2.paramsInAccess_->isDataCompiled = true;
	hrlAnalysis::PopFilterInfoPtr info2 = spikeAnalysis2.filterPopGauss(30);
	////////////////////////////////////////////////////////////////////////////////
	// Load data files
	////////////////////////////////////////////////////////////////////////////////
	// Only Cells 1 and 2 have spikes in this period.
	AnalysisData *data = new AnalysisData();
	CPPUNIT_ASSERT(data->fillFilterData( string(STATE_FILE_STR_PREFIX) + string("popFilter1_cell1.dat") ));
	CPPUNIT_ASSERT(data->compareFilterData(info1->states.at(0),tol));
	CPPUNIT_ASSERT(data->fillFilterData( string(STATE_FILE_STR_PREFIX) + string("popFilter1_cell2.dat") ));
	CPPUNIT_ASSERT(data->compareFilterData(info1->states.at(1),tol));
	CPPUNIT_ASSERT(data->fillFilterData( string(STATE_FILE_STR_PREFIX) + string("popFilter1_cell3.dat") ));
	CPPUNIT_ASSERT(data->compareFilterData(info1->states.at(2),tol));
	CPPUNIT_ASSERT(data->fillFilterData( string(STATE_FILE_STR_PREFIX) + string("popFilter1_cell4.dat") ));
	CPPUNIT_ASSERT(data->compareFilterData(info1->states.at(3),tol));
	CPPUNIT_ASSERT(data->fillFilterData( string(STATE_FILE_STR_PREFIX) + string("popFilter1_cell5.dat") ));
	CPPUNIT_ASSERT(data->compareFilterData(info1->states.at(4),tol));
	CPPUNIT_ASSERT(data->fillFilterData( string(STATE_FILE_STR_PREFIX) + string("popFilter1_cell6.dat") ));
	CPPUNIT_ASSERT(data->compareFilterData(info1->states.at(5),tol));

	CPPUNIT_ASSERT(data->fillFilterData( string(STATE_FILE_STR_PREFIX) + string("popFilter2_cell1.dat") ));
	CPPUNIT_ASSERT(data->compareFilterData(info2->states.at(0),tol));
	CPPUNIT_ASSERT(data->fillFilterData( string(STATE_FILE_STR_PREFIX) + string("popFilter2_cell2.dat") ));
	CPPUNIT_ASSERT(data->compareFilterData(info2->states.at(1),tol));
	CPPUNIT_ASSERT(data->fillFilterData( string(STATE_FILE_STR_PREFIX) + string("popFilter2_cell3.dat") ));
	CPPUNIT_ASSERT(data->compareFilterData(info2->states.at(2),tol));
	CPPUNIT_ASSERT(data->fillFilterData( string(STATE_FILE_STR_PREFIX) + string("popFilter2_cell4.dat") ));
	CPPUNIT_ASSERT(data->compareFilterData(info2->states.at(3),tol));
	CPPUNIT_ASSERT(data->fillFilterData( string(STATE_FILE_STR_PREFIX) + string("popFilter2_cell5.dat") ));
	CPPUNIT_ASSERT(data->compareFilterData(info2->states.at(4),tol));
	CPPUNIT_ASSERT(data->fillFilterData( string(STATE_FILE_STR_PREFIX) + string("popFilter2_cell6.dat") ));
	CPPUNIT_ASSERT(data->compareFilterData(info2->states.at(5),tol));

	cout << "\t\tFinish testFilter." << endl;
}

void AnalysisTest::testStateDistance() {
	cout << "\tStart testStateDistance..." << endl;
	std::vector<std::string> fileNames;
	double tol = 0.0001; // tolerance for voltage error
	////////////////////////////////////////////////////////////////////////////////
	// Population 1
	////////////////////////////////////////////////////////////////////////////////
	hrlAnalysis::SpikeAnalysisAccess spikeAnalysis1(0,20,0,5,fileNames,6);
	// Fill in the spike information.
	int temp1[] = {3};
	for(int i = 0; i < 1; i++) {
		spikeAnalysis1.cellActivityAccess_->at(1).push_back(temp1[i]);
	}
	spikeAnalysis1.paramsInAccess_->isDataCompiled = true;
	hrlAnalysis::PopFilterInfoPtr info1 = spikeAnalysis1.filterPopGauss(30);
	////////////////////////////////////////////////////////////////////////////////
	// Population 2
	////////////////////////////////////////////////////////////////////////////////
	hrlAnalysis::SpikeAnalysisAccess spikeAnalysis2(0,20,0,5,fileNames,6);
	// Fill in the spike information.
	int temp3[] = {6};
	int temp4[] = {15};
	for(int i = 0; i < 1; i++) {
		spikeAnalysis2.cellActivityAccess_->at(0).push_back(temp3[i]);
	}
	for(int i = 0; i < 1; i++) {
		spikeAnalysis2.cellActivityAccess_->at(5).push_back(temp4[i]);
	}
	spikeAnalysis2.paramsInAccess_->isDataCompiled = true;
	hrlAnalysis::PopFilterInfoPtr info2 = spikeAnalysis2.filterPopGauss(30);
	////////////////////////////////////////////////////////////////////////////////
	// State Distance
	////////////////////////////////////////////////////////////////////////////////
	hrlAnalysis::StateDistancePtr output = calcStateDistance(info1, info2);
	////////////////////////////////////////////////////////////////////////////////
	// Load data files
	////////////////////////////////////////////////////////////////////////////////
	// Only Cells 1 and 2 have spikes in this period.
	AnalysisData *data = new AnalysisData();
	CPPUNIT_ASSERT(data->fillStateData( string(STATE_FILE_STR_PREFIX) + string("pop_state.dat") ));
	CPPUNIT_ASSERT(data->compareStateData(output->state,tol));

	cout << "\t\tFinish testgetStateDistance." << endl;

}


