/*
    HRLAnalysis(TM) Software License - Version 1.0 - August 27th, 2013

    Permission is hereby granted, free of charge, to any person or 
    organization obtaining a copy of the software and accompanying 
    documentation covered by this license (the "Software") to use, 
    reproduce, display, distribute, execute, and transmit the 
    Software, and to prepare derivative works of the Software, and 
    to permit third-parties to whom the Software is furnished to do 
    so, all subject to the following:

    The copyright notices in the Software and this entire statement, 
    including the above license grant, this restriction and the 
    following disclaimer, must be included in all copies of the 
    Software, in whole or in part, and all derivative works of the 
    Software, unless such copies or derivative works are solely in 
    the form of machine-executable object code generated by a source 
    language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND 
    NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR 
    ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR 
    OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
    OTHER DEALINGS IN THE SOFTWARE, INCLUDING BUT NOT LIMITED TO THE 
    COMPATIBILITY OF THIS LICENSE WITH OTHER SOFTWARE LICENSES.
*/
#include <cppunit/TestFixture.h>
#include <cppunit/extensions/HelperMacros.h>
#include <AnalysisData.h>
#include <HrlNeuralAnalysis.h>
#include <SpikeAnalysisAccess.h>
#include <HrlNeuralAnalysisHRLSim.h>
#include <HrlNeuralAnalysisVoltage.h>
#include <NeuronParams.h>

#define CA1_FILE_STR_PREFIX "../../test/data/CA1/"
#define SERIALIZE_FILE_STR_PREFIX "../../test/data/serialize/"
#define BURST_NORMAL_FILE_STR_PREFIX "../../test/data/burstAnalysis/normal/Data/"
#define SYNCH_FILE_DATA1 "../../test/data/synchrony/synchrony_data.dat"
#define VOLT_FILE_STR_PREFIX "../../test/data/VOLT/"
    
class AnalysisTest : public CppUnit::TestFixture {
        CPPUNIT_TEST_SUITE( AnalysisTest );
        CPPUNIT_TEST( testConstructor );
        CPPUNIT_TEST( testAnalysisIntData );
        CPPUNIT_TEST( testAnalysisDblData );
        CPPUNIT_TEST( testAnalysisIntData2 );
        CPPUNIT_TEST( testAnalysisDblData2 );
        CPPUNIT_TEST( testGetCellRates );
        CPPUNIT_TEST( testGetRateBins );
        CPPUNIT_TEST( testSurpriseValue );
        CPPUNIT_TEST( testGetVoltageResults1 );
        CPPUNIT_TEST( testGetVoltageResults2 );
        CPPUNIT_TEST( testGetVoltageResults3 );
        CPPUNIT_TEST( testGetVoltageResults4 );
        CPPUNIT_TEST( testGetVoltageResults5 );
        CPPUNIT_TEST( testGetVoltageResults6 );
        CPPUNIT_TEST( testGetVoltageResults7 );
        CPPUNIT_TEST( testGetVoltageResults8 );
        CPPUNIT_TEST( testGetVoltageResults9 );
        CPPUNIT_TEST( testGetVoltageResults10 );
        CPPUNIT_TEST( testGetVoltageResults11 );
        CPPUNIT_TEST( testGetVoltageResults12 );
        CPPUNIT_TEST( testGetVoltageResults13 );
        CPPUNIT_TEST( testGetVoltageResults14 );
        CPPUNIT_TEST( testGetVoltageResults15 );
        CPPUNIT_TEST( testGetVoltageResults16 );
        CPPUNIT_TEST( testGetVoltageSpikeResults1 );
        CPPUNIT_TEST( testGetVoltageSpikeResults2 );
        CPPUNIT_TEST( testGetVoltageSpikeResults3 );
        CPPUNIT_TEST( testGetVoltageSpikeResults4 );
        CPPUNIT_TEST( testGetVoltageSpikeResults5 );
        CPPUNIT_TEST( testGetVoltageSpikeResults6 );
        CPPUNIT_TEST( testGetVoltageSpikeResults7 );
        CPPUNIT_TEST( testGetVoltageSpikeResults8 );
        CPPUNIT_TEST( testGetVoltageSpikeResults9 );
        CPPUNIT_TEST( testGetVoltageSpikeResults10 );
        CPPUNIT_TEST( testGetVoltageSpikeResults11 );
        CPPUNIT_TEST( testGetVoltageSpikeResults12 );
        CPPUNIT_TEST( testGetVoltageSpikeResults13 );
        CPPUNIT_TEST( testGetVoltageSpikeResults14 );
        CPPUNIT_TEST( testGetVoltageSpikeResults15 );
        CPPUNIT_TEST( testGetVoltageSpikeResults16 );
        CPPUNIT_TEST( testGetRasterResult );
        CPPUNIT_TEST( testGetCOV );
        CPPUNIT_TEST( testGetGaussWindowRates );
        CPPUNIT_TEST( testGetGaussWindowRates2 );
        CPPUNIT_TEST( testGetWindowRates );
        CPPUNIT_TEST( testGetCellRatesAndBins );
        CPPUNIT_TEST( testGetBurstAnalysis );
        CPPUNIT_TEST( testGetSPIKESynchrony );
        CPPUNIT_TEST( testGetSPIKESynchrony2 );
        CPPUNIT_TEST( testSerialize );
        CPPUNIT_TEST( testSerializeVoltage );
        CPPUNIT_TEST_SUITE_END();
    private:
        AnalysisData * data_;
    public:
        void setUp();
        void tearDown();
        void testConstructor();
        void testAnalysisIntData();
        void testAnalysisDblData();
        void testAnalysisIntData2();
        void testAnalysisDblData2();
        void testSurpriseValue();
        void testGetVoltageResults1();
        void testGetVoltageResults2();
        void testGetVoltageResults3();
        void testGetVoltageResults4();
        void testGetVoltageResults5();
        void testGetVoltageResults6();
        void testGetVoltageResults7();
        void testGetVoltageResults8();
        void testGetVoltageResults9();
        void testGetVoltageResults10();
        void testGetVoltageResults11();
        void testGetVoltageResults12();
        void testGetVoltageResults13();
        void testGetVoltageResults14();
        void testGetVoltageResults15();
        void testGetVoltageResults16();
        void testGetVoltageSpikeResults1();
        void testGetVoltageSpikeResults2();
        void testGetVoltageSpikeResults3();
        void testGetVoltageSpikeResults4();
        void testGetVoltageSpikeResults5();
        void testGetVoltageSpikeResults6();
        void testGetVoltageSpikeResults7();
        void testGetVoltageSpikeResults8();
        void testGetVoltageSpikeResults9();
        void testGetVoltageSpikeResults10();
        void testGetVoltageSpikeResults11();
        void testGetVoltageSpikeResults12();
        void testGetVoltageSpikeResults13();
        void testGetVoltageSpikeResults14();
        void testGetVoltageSpikeResults15();
        void testGetVoltageSpikeResults16();
        void testGetRasterResult();
        void testGetCOV();
        void testGetGaussWindowRates();
        void testGetGaussWindowRates2();
        void testGetWindowRates();
        void testGetCellRates();
        void testGetRateBins();
        void testGetCellRatesAndBins();
        void testGetBurstAnalysis();
        void testGetSPIKESynchrony();
        void testGetSPIKESynchrony2();
        void testSerialize();
        void testSerializeVoltage();

};







