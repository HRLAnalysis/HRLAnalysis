/*
    HRLAnalysis(TM) Software License - Version 1.0 - August 27th, 2013

    Permission is hereby granted, free of charge, to any person or 
    organization obtaining a copy of the software and accompanying 
    documentation covered by this license (the "Software") to use, 
    reproduce, display, distribute, execute, and transmit the 
    Software, and to prepare derivative works of the Software, and 
    to permit third-parties to whom the Software is furnished to do 
    so, all subject to the following:

    The copyright notices in the Software and this entire statement, 
    including the above license grant, this restriction and the 
    following disclaimer, must be included in all copies of the 
    Software, in whole or in part, and all derivative works of the 
    Software, unless such copies or derivative works are solely in 
    the form of machine-executable object code generated by a source 
    language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND 
    NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR 
    ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR 
    OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
    OTHER DEALINGS IN THE SOFTWARE, INCLUDING BUT NOT LIMITED TO THE 
    COMPATIBILITY OF THIS LICENSE WITH OTHER SOFTWARE LICENSES.
*/
#ifndef HrlNeuralAnalysisVoltage_H
#define HrlNeuralAnalysisVoltage_H

#include <boost/foreach.hpp>
#include <sys/types.h>
#include <assert.h>
#include <vector>
#include <string>
#include <iostream>
#include <fstream>
#include <numeric>
#include <math.h>
#include <VoltageInfo.h>
#include <boost/shared_ptr.hpp>
#include <boost/serialization/base_object.hpp>
#include <NeuronParams.h>
#include <HrlNeuralAnalysis.h>

namespace hrlAnalysis {

class HrlNeuralAnalysisVoltage: public HrlNeuralAnalysis
{
    public:
		HrlNeuralAnalysisVoltage();
        /**
         * Constructor
         *
         * @param startTimeIn the point in time to begin extracting spiking information.
         * @param endTimeIn when to stop extracting information.
         * @param startIdxIn the starting cell index for neurons to be extracted.
         * @param endIdxIn the last index of the neurons to be extracted.
         * @param fileNames the bin files containing the simulations results.
         * @param numNeuronsIn the total number of neurons for which voltages are dumped.
         * @param getSpikesIn when true, calculate spikes using a simple thresholding.
         * @param spikeThresholdIn the spike theshold value.
         */
        HrlNeuralAnalysisVoltage(int startTimeIn, int endTimeIn, int startIdxIn,
                                    int endIdxIn, std::vector<std::string> fileNames,
                                    int numNeuronsIn, bool getSpikesIn, float spikeThresholdIn);
        /**
         * Base destructor
         */
        virtual ~HrlNeuralAnalysisVoltage();
        /**
         * Create the data structures used for analysis.  The neuron voltages and indices,
         * within the specified ranges, are extracted from the given bin files 
         * (assumed to be sorted in chronological order).  The voltage binary files 
         * are assumed to be voltage dumps of type float, where at each timestep 
         * the (float) voltage vector is subsequently dumped to the file followed.  
         * @return Success
         */
        virtual bool buildDataStructures();
        /**
         * Return the voltages as read from the voltage dump file.
         */
        const VoltageInfoPtr voltages();

        virtual void save(std::string filename);

        virtual void load(std::string filename);

    private:
        /**
         * Overloaded to make sure the voltage information is cleared as well.
         */
        void clearDataStructures();
        bool processFile(std::ifstream &fpIn, float * voltage);
    protected:
        VoltageInfoPtr voltage_;
    public:
        int numTimes_;          // total number of time slots to consider
        int numCells_;          // total number of cells to consider
        uint time_;             // keep track of the time steps that have been processed
        int numNeurons_;        // number of neurons with voltages written to file (needed for reading voltages)
        float spikeThreshold_;  // when detecting spikes, voltage values of this level indicate spikes
        bool getSpikes_;        // whether to extract spikes or not

        friend class boost::serialization::access;
        template <typename Archive>
        void serialize(Archive& ar, const unsigned version) {
        	ar & boost::serialization::base_object<HrlNeuralAnalysis>(*this);
        	ar & numTimes_ & numCells_ & time_ & numNeurons_ & spikeThreshold_ & getSpikes_ & voltage_;
        }

};

typedef boost::shared_ptr<HrlNeuralAnalysisVoltage> HrlNeuralAnalysisVoltagePtr;

} // namespace hrlAnalysis

#endif /* HrlNeuralAnalysisVoltage_H */
