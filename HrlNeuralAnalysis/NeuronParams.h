/*
    HRLAnalysis(TM) Software License - Version 1.0 - August 27th, 2013

    Permission is hereby granted, free of charge, to any person or 
    organization obtaining a copy of the software and accompanying 
    documentation covered by this license (the "Software") to use, 
    reproduce, display, distribute, execute, and transmit the 
    Software, and to prepare derivative works of the Software, and 
    to permit third-parties to whom the Software is furnished to do 
    so, all subject to the following:

    The copyright notices in the Software and this entire statement, 
    including the above license grant, this restriction and the 
    following disclaimer, must be included in all copies of the 
    Software, in whole or in part, and all derivative works of the 
    Software, unless such copies or derivative works are solely in 
    the form of machine-executable object code generated by a source 
    language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND 
    NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR 
    ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR 
    OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
    OTHER DEALINGS IN THE SOFTWARE, INCLUDING BUT NOT LIMITED TO THE 
    COMPATIBILITY OF THIS LICENSE WITH OTHER SOFTWARE LICENSES.
*/
#ifndef NEURALDATA_H_
#define NEURALDATA_H_

#include <boost/shared_ptr.hpp>
#include <vector>

namespace boost {
namespace serialization {
	class access;
}
}

namespace hrlAnalysis {

struct NeuronParams {
    int startTime;
    int endTime;
    int startIdx;
    int endIdx;
    double sampleFreq;
    bool isDataCompiled;
    std::vector<std::string> fileNames;

    NeuronParams():
        startTime(0), endTime(0), startIdx(0), \
        endIdx(0), sampleFreq(1000), fileNames(*(new std::vector<std::string>)), isDataCompiled(false) {};

    NeuronParams(int startTimeIn, int endTimeIn, int startIdxIn, int endIdxIn, std::vector<std::string> fileNamesIn):
		startTime(startTimeIn), endTime(endTimeIn), startIdx(startIdxIn), \
		endIdx(endIdxIn), sampleFreq(1000), fileNames(fileNamesIn), isDataCompiled(false) {};

private:
    friend class boost::serialization::access;
	template<typename Archive>
	void serialize(Archive& ar, const unsigned int version) {
		(void)version;
		ar & startTime & endTime & startIdx & endIdx & sampleFreq & fileNames & isDataCompiled;
	}

};

typedef boost::shared_ptr<NeuronParams> NeuronParamsPtr;

}

#endif /* NEURALDATA_H_ */
