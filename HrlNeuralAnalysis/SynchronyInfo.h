/*
    HRLAnalysis(TM) Software License - Version 1.0 - August 27th, 2013

    Permission is hereby granted, free of charge, to any person or 
    organization obtaining a copy of the software and accompanying 
    documentation covered by this license (the "Software") to use, 
    reproduce, display, distribute, execute, and transmit the 
    Software, and to prepare derivative works of the Software, and 
    to permit third-parties to whom the Software is furnished to do 
    so, all subject to the following:

    The copyright notices in the Software and this entire statement, 
    including the above license grant, this restriction and the 
    following disclaimer, must be included in all copies of the 
    Software, in whole or in part, and all derivative works of the 
    Software, unless such copies or derivative works are solely in 
    the form of machine-executable object code generated by a source 
    language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND 
    NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR 
    ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR 
    OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
    OTHER DEALINGS IN THE SOFTWARE, INCLUDING BUT NOT LIMITED TO THE 
    COMPATIBILITY OF THIS LICENSE WITH OTHER SOFTWARE LICENSES.
*/
#ifndef SYNCHRONY_INFO_H
#define SYNCHRONY_INFO_H

#include <boost/shared_ptr.hpp>
#include <boost/foreach.hpp>
#include <sys/types.h>
#include <assert.h>
#include <vector>
#include <string>
#include <iostream>
#include <fstream>
#include <numeric>
#include <math.h>
#include <algorithm>

namespace hrlAnalysis {

class CellSynchronyInfo {

    public:
        /**
         * Constructor
         *
         * @param cell spike train.
         * @param start time.
         * @param end time.
         */
        CellSynchronyInfo(std::vector<int> *spikeTrainIn, int startTime, int endTime);
        virtual ~CellSynchronyInfo();
                // operators are required to make boost/shared_ptr happy
        bool operator==(const CellSynchronyInfo&) const {return false;}
        bool operator!=(const CellSynchronyInfo&) const {return true;}
        void incrementSynchronyTiming();
        void calcDeltas(boost::shared_ptr<CellSynchronyInfo> cell2Info);
        double getSn();
    public:
        // These are written in
        std::vector<int>::iterator ptr_t_p1_;
        std::vector<int>::iterator ptr_t_p_;
        std::vector<int>::iterator ptr_t_f_;
        std::vector<int>::iterator ptr_t_f1_;
        std::vector<int> *spikeTrain_;
        int t_p1_;
        int t_p_;
        int t_f_;
        int t_f1_;
        double dt_p_;
        double dt_f_;
        double x_isi_;
        double x_p_;
        double x_f_;
        int T_;
        int startTime_;
        int endTime_;
};

struct SynchronyInfo
{
        std::vector<double> S;
};

typedef boost::shared_ptr<SynchronyInfo> SynchronyInfoPtr;
typedef boost::shared_ptr<CellSynchronyInfo> CellSynchronyInfoPtr;

}


#endif
