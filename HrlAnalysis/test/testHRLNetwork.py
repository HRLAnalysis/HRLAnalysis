#!/usr/bin/python
#
#   HRLAnalysis(TM) Software License - Version 1.0 - August 27th, 2013
#
#   Permission is hereby granted, free of charge, to any person or 
#   organization obtaining a copy of the software and accompanying 
#   documentation covered by this license (the "Software") to use, 
#   reproduce, display, distribute, execute, and transmit the 
#   Software, and to prepare derivative works of the Software, and 
#   to permit third-parties to whom the Software is furnished to do 
#   so, all subject to the following:
#
#   The copyright notices in the Software and this entire statement, 
#   including the above license grant, this restriction and the 
#   following disclaimer, must be included in all copies of the 
#   Software, in whole or in part, and all derivative works of the 
#   Software, unless such copies or derivative works are solely in 
#   the form of machine-executable object code generated by a source 
#   language processor.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
#   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
#   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND 
#   NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR 
#   ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR 
#   OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
#   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
#   OTHER DEALINGS IN THE SOFTWARE, INCLUDING BUT NOT LIMITED TO THE 
#   COMPATIBILITY OF THIS LICENSE WITH OTHER SOFTWARE LICENSES.
#
import sys, os
import unittest
# Hard code the system path additions
sys.path.append('../lib/')

import libHrlAnalysis
import libHrlAnalysisData
import filecmp

# Create our pyunit class
class TestAnalysis(unittest.TestCase):
 
    # Just Test the Network Analysis Code as a whole.
    def test_InitialWeights1(self):
                
        # This is useless since the network analysis file doesn't work for this network
        sys.path.append('../../test/data/Network/')
        try:
            exec('from networkAnalysisConfig import *')
        except:
            print "Error: Cannot find the requested configuration file: ", fileName
            raise
            
        populations = getCellGroups()
        
        networkAnalysis = libHrlAnalysis.HrlNetworkAnalysis()
        #networkAnalysis.setLogToStd()

        numOutputs = 3
        numInputs = 3
        numControl = 3
        
        outputStart = 0
        inputStart = 60
        controlStart = 30

        for i in range(10):
            networkAnalysis.addPopulation("Output_%i"%(i+1), outputStart+(numOutputs*i), outputStart+(numOutputs*i)+numOutputs - 1)
            networkAnalysis.addDummyPopulation("Input_%i"%(10-i), inputStart+(numInputs*i), inputStart+(numInputs*i)+numInputs - 1)
            networkAnalysis.addDummyPopulation("Control_%i"%(10-i), controlStart+(numControl*i), controlStart + (numControl*i) + numControl - 1)

        fileName = '../../test/data/Network/net.bin'
        networkAnalysis.buildNetwork(fileName)
        
        networkAnalysis.getWeights('../../test/data/Network/weights_0001.bin')
        networkAnalysis.outputGraph('../../test/data/Network/pyNet.dot')
        self.assertTrue(filecmp.cmp('../../test/data/Network/pyNet.dot','../../test/data/Network/network.dot'))
        
    def test_InitialWeights2(self):
                        
        networkAnalysis = libHrlAnalysis.HrlNetworkAnalysis()
        #networkAnalysis.setLogToStd()

        numOutputs = 3;
        numInputs = 3;
        numControl = 3;
        outputStart = 0;
        inputStart = 60;
        controlStart = 30

        for i in range(10):
            networkAnalysis.addPopulation("Output_%i"%(i+1), outputStart+(numOutputs*i), outputStart+(numOutputs*i)+numOutputs - 1)

        for i in range(9,-1,-1):        
            networkAnalysis.addDummyPopulation("Input_%i"%(10-i), inputStart+(numInputs*i), inputStart+(numInputs*i)+numInputs - 1)
        
        networkAnalysis.buildNetwork('../../test/data/Network/net.bin')
        networkAnalysis.getWeights('../../test/data/Network/weights_0001.bin')
        networkAnalysis.outputWeights('../../test/data/Network/populationNames_py.dat','../../test/data/Network/weights_0001_py.dat')

        self.assertTrue(filecmp.cmp('../../test/data/Network/populationNames_py.dat','../../test/data/Network/populationNames.dat'))
        self.assertTrue(filecmp.cmp('../../test/data/Network/weights_0001_py.dat','../../test/data/Network/weights_0001.dat'))


    def test_Weights(self):
                        
        networkAnalysis = libHrlAnalysis.HrlNetworkAnalysis()
        #networkAnalysis.setLogToStd()

        numOutputs = 3;
        numInputs = 3;
        numControl = 3;
        outputStart = 0;
        inputStart = 60;
        controlStart = 30

        for i in range(10):
            networkAnalysis.addPopulation("Output_%i"%(i+1), outputStart+(numOutputs*i), outputStart+(numOutputs*i)+numOutputs - 1)

        for i in range(9,-1,-1):        
            networkAnalysis.addDummyPopulation("Input_%i"%(10-i), inputStart+(numInputs*i), inputStart+(numInputs*i)+numInputs - 1)
        
        networkAnalysis.buildNetwork('../../test/data/Network/net.bin')
        networkAnalysis.getWeights('../../test/data/Network/weights_0010.bin')
        networkAnalysis.outputWeights('../../test/data/Network/populationNames_py.dat','../../test/data/Network/weights_0010_py.dat')

        self.assertTrue(filecmp.cmp('../../test/data/Network/populationNames_py.dat','../../test/data/Network/populationNames.dat'))
        self.assertTrue(filecmp.cmp('../../test/data/Network/weights_0010_py.dat','../../test/data/Network/weights_0010.dat'))

    
if __name__ == "__main__":
    unittest.main()
    
