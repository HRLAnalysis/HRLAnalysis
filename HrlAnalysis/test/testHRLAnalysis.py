#!/usr/bin/python
#
#   HRLAnalysis(TM) Software License - Version 1.0 - August 27th, 2013
#
#   Permission is hereby granted, free of charge, to any person or 
#   organization obtaining a copy of the software and accompanying 
#   documentation covered by this license (the "Software") to use, 
#   reproduce, display, distribute, execute, and transmit the 
#   Software, and to prepare derivative works of the Software, and 
#   to permit third-parties to whom the Software is furnished to do 
#   so, all subject to the following:
#
#   The copyright notices in the Software and this entire statement, 
#   including the above license grant, this restriction and the 
#   following disclaimer, must be included in all copies of the 
#   Software, in whole or in part, and all derivative works of the 
#   Software, unless such copies or derivative works are solely in 
#   the form of machine-executable object code generated by a source 
#   language processor.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
#   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
#   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND 
#   NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR 
#   ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR 
#   OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
#   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
#   OTHER DEALINGS IN THE SOFTWARE, INCLUDING BUT NOT LIMITED TO THE 
#   COMPATIBILITY OF THIS LICENSE WITH OTHER SOFTWARE LICENSES.
#
import sys
import os
import unittest
# Hard code the system path additions
sys.path.append('../lib/')
import libHrlAnalysis
import libHrlAnalysisData

class TestAnalysis(unittest.TestCase):
      
    # Test get raster 
    def test_getRasterResult(self):
        fileNames = libHrlAnalysis.vector_string()
        fileNames.append('../../test/data/CA1/spikes_0001.bin')
        fileNames.append('../../test/data/CA1/spikes_0002.bin')
              
        analysis = libHrlAnalysis.HrlNeuralAnalysisHRLSim(0,4000,26200,28199,
                                                          fileNames)
        spikes = analysis.getSpikeTimes()
        
        data = libHrlAnalysisData.AnalysisData()
        data.fillRasterData('../../test/data/CA1/CA1_raster.dat')

        self.assertTrue(data.compareRasterDataDim(spikes.time,1))
        self.assertTrue(data.compareRasterDataDim(spikes.spikes,2))

    # Tese the COV analysis
    def test_getCOV(self):
        fileNames = libHrlAnalysis.vector_string()
        fileNames.append('../../test/data/CA1/spikes_0001.bin')
        fileNames.append('../../test/data/CA1/spikes_0002.bin')
           
        analysis = libHrlAnalysis.HrlNeuralAnalysisHRLSim(0,4000,26200,28199,
                                                          fileNames)
        covInfo = analysis.getCOV()

        data = libHrlAnalysisData.AnalysisData()
        self.assertTrue(data.fillCOV('../../test/data/CA1/CA1_cov.dat'))
        self.assertTrue(data.compareCOV(covInfo.cov))


    # Test the Window Rate Analysis
    def test_GetWindowRates(self):
        fileNames = libHrlAnalysis.vector_string()
        fileNames.append('../../test/data/CA1/spikes_0001.bin')
        fileNames.append('../../test/data/CA1/spikes_0002.bin')
        
        analysis = libHrlAnalysis.HrlNeuralAnalysisHRLSim(0,4000,26200,28199,
                                                          fileNames)
        rates = analysis.getWindowRate(10,10)
        
        data = libHrlAnalysisData.AnalysisData()
        self.assertTrue(data.fillWindowRates(
                                '../../test/data/CA1/CA1_window_rates.dat'))

        self.assertTrue(data.compareWindowRates_double(rates.rates))

  
    # Test the Window Rate Analysis
    def test_GetGaussWindowRates(self):
        fileNames = libHrlAnalysis.vector_string()
        fileNames.append('../../test/data/CA1/spikes_0001.bin')
        fileNames.append('../../test/data/CA1/spikes_0002.bin')

        analysis = libHrlAnalysis.HrlNeuralAnalysisHRLSim(0,4000,26200,28199,
                                                          fileNames)
        rates = analysis.getGaussWindowRate(10,10)
        
        data = libHrlAnalysisData.AnalysisData()
        self.assertTrue(data.fillWindowRates(
                            '../../test/data/CA1/CA1_gauss_window_rates.dat'))

        self.assertTrue(data.compareWindowRates_double(rates.rates))

     
    # Test the rate bin analysis
    def test_GetRateBins(self):
        fileNames = libHrlAnalysis.vector_string()
        fileNames.append('../../test/data/CA1/spikes_0001.bin')
        fileNames.append('../../test/data/CA1/spikes_0002.bin')

        analysis = libHrlAnalysis.HrlNeuralAnalysisHRLSim(0,4000,26200,28199,
                                                          fileNames)
        rateBinInfo = analysis.getRateBins(100)

        data = libHrlAnalysisData.AnalysisData()
        self.assertTrue(data.fillSpikeBins(
                                    '../../test/data/CA1/CA1_spike_bins.dat'))

        self.assertTrue(data.compareSpikeBinsAt(rateBinInfo.counts,0))
        self.assertTrue(data.compareSpikeBinsAt(rateBinInfo.counts,1)) 


    # Test Gaussian Convolution
    def test_ConvolveGaussian(self):
        fileNames = libHrlAnalysis.vector_string()
        fileNames.append('../../test/data/CA1/spikes_0001.bin')
        fileNames.append('../../test/data/CA1/spikes_0002.bin')

        analysis = libHrlAnalysis.HrlNeuralAnalysisHRLSim(0,4000,26200,28199,
                                                          fileNames)
        #convolveGaussInfo = analysis.convolveGaussPop(5)        

    # Test Cell Rates and Bins
    def test_GetCellRatesAndBins(self):
        fileNames = libHrlAnalysis.vector_string()
        fileNames.append('../../test/data/CA1/spikes_0001.bin')
        fileNames.append('../../test/data/CA1/spikes_0002.bin')

        analysis = libHrlAnalysis.HrlNeuralAnalysisHRLSim(0,4000,26200,28199,
                                                          fileNames)
        rateBinInfo = analysis.getRatesWithBins(100)

        data = libHrlAnalysisData.AnalysisData()
        self.assertTrue(data.fillSpikeRates(
                                    '../../test/data/CA1/CA1_spike_rates.dat'))

        self.assertTrue(data.compareSpikeRates_int(rateBinInfo.cells))
        self.assertTrue(data.compareSpikeRates_double(rateBinInfo.rates))
                
        self.assertTrue(data.fillSpikeBins(
                                    '../../test/data/CA1/CA1_spike_bins.dat'))

        self.assertTrue(data.compareSpikeBinsAt(rateBinInfo.counts,0))
        self.assertTrue(data.compareSpikeBinsAt(rateBinInfo.counts,1))         
     
     
    def test_GetSPIKESynchrony(self):
        fileNames = libHrlAnalysis.vector_string()
        tester = HrlNeuralAnalysisPythonSynchrony(0,1300,0,1,fileNames)

        S = tester.getPairSynchrony(0,1)

        import numpy as np   
        if( os.path.exists("../../test/data/synchrony/synchrony_data.dat") ):
            values = np.loadtxt("../../test/data/synchrony/synchrony_data.dat")
            self.assertTrue(len(S.S) == len(values))
            for i in range(len(S.S)):
                self.assertTrue( abs(S.S[i]-values[i]) < 0.00000001)   
             
            self.assertTrue( abs(
                        tester.calcSPIKEDistance(S)-0.274376) < 0.000001)
            self.assertTrue( abs(
                        tester.calcSPIKEDistanceAvg(S)-0.211059) < 0.000001)

        else:
            self.fail("Could not open file: ../../test/data/synchrony/synchrony_data.dat")
     
                
    def test_Voltages(self):
        fileNames = libHrlAnalysis.vector_string()
        for i in range(20):
            fileNames.append("../../test/data/VOLT/voltages_%04d.dat"%(i+1))

        data = libHrlAnalysisData.AnalysisData()
        self.assertTrue(data.fillVoltageData(
                                        "../../test/data/VOLT/VOLT_TEST.dat"))

        analysis = libHrlAnalysis.HrlNeuralAnalysisVoltage(
                                                0, 2000, 0, 61, 
                                                fileNames, 62,False,-49.0)

        voltageInfo = analysis.voltages()
        #print "\n\n",len(voltageInfo.voltage),"\n\n"
        self.assertTrue(data.compareVoltageData(voltageInfo.voltage, 0.0001))


    # Test get raster 
    def test_serialize(self):
        fileNames = libHrlAnalysis.vector_string()
        fileNames.append('../../test/data/CA1/spikes_0001.bin')
        fileNames.append('../../test/data/CA1/spikes_0002.bin')
              
        analysisIn = libHrlAnalysis.HrlNeuralAnalysisHRLSim(0,4000,26200,28199,
                                                          fileNames)
        analysisIn.buildDataStructures()
        analysisIn.save("./ser.bin")
        
        analysisOut = libHrlAnalysis.HrlNeuralAnalysisHRLSim(
                                                0,0,0,0,
                                                libHrlAnalysis.vector_string())
        analysisOut.load("./ser.bin")

        spikes = analysisOut.getSpikeTimes()
        
        data = libHrlAnalysisData.AnalysisData()
        data.fillRasterData('../../test/data/CA1/CA1_raster.dat')

        self.assertTrue(data.compareRasterDataDim(spikes.time,1))
        self.assertTrue(data.compareRasterDataDim(spikes.spikes,2))

       




# Create a class that inherits from HrlNeuralAnalysis
class HrlNeuralAnalysisPythonSynchrony(libHrlAnalysis.HrlNeuralAnalysis):
    def __init__(self,startTimeIn,endTimeIn,startIdxIn,endIdxIn,fileNames):
        libHrlAnalysis.HrlNeuralAnalysis.__init__(
                                                self,startTimeIn,endTimeIn,
                                                startIdxIn,endIdxIn,fileNames)
              
        
    def buildDataStructures(self):

        temp1 = [100,200,300,400,500,600,700,800,900,1000,1100,1200];
        temp2 = [100,210,320,430,540,650,760,870,980,1090,1200];

        self.cellActivity().append(libHrlAnalysis.vector_int())
        for i in range(len(temp1)):
            self.cellActivity()[0].append(temp1[i])

        self.cellActivity().append(libHrlAnalysis.vector_int())
        for i in range(len(temp2)):
            self.cellActivity()[1].append(temp2[i])

        self.paramsIn().startTime = 0
        self.paramsIn().endTime = 1300
        self.paramsIn().isDataCompiled = True
        
        return True


class HrlNeuralAnalysisPythonTest(libHrlAnalysis.HrlNeuralAnalysis):
    
    
    def __init__(self,startTimeIn,endTimeIn,startIdxIn,endIdxIn,fileNames):
        libHrlAnalysis.HrlNeuralAnalysis.__init__(
                                            self,startTimeIn,endTimeIn,
                                            startIdxIn,endIdxIn,fileNames)


    def buildDataStructures(self):
        temp1 = [100,200,300,400,500,600,700,800,900,1000,1100,1200];
        temp2 = [100,210,320,430,540,650,760,870,980,1090,1200];

        for i in range(len(temp1)):
            self.spikeActivity().append(libHrlAnalysis.int_pair(temp1[i],0))

        for i in range(len(temp2)):
            self.spikeActivity().append(libHrlAnalysis.int_pair(temp2[i],1))

        self.setParamsIn(params)
        self.paramsIn().startTime = 0
        self.paramsIn().endTime = 1300
        self.paramsIn().isDataCompiled = True

        from operator import attrgetter
        temp = sorted(self.spikeActivity(), key=attrgetter('first'))

        for spikePair in temp:
            print spikePair.first,spikePair.second

        return True

if __name__ == "__main__":
    unittest.main()

    



    
