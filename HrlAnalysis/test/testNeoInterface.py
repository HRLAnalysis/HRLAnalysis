#!/usr/bin/python
#
#   HRLAnalysis(TM) Software License - Version 1.0 - August 27th, 2013
#
#   Permission is hereby granted, free of charge, to any person or 
#   organization obtaining a copy of the software and accompanying 
#   documentation covered by this license (the "Software") to use, 
#   reproduce, display, distribute, execute, and transmit the 
#   Software, and to prepare derivative works of the Software, and 
#   to permit third-parties to whom the Software is furnished to do 
#   so, all subject to the following:
#
#   The copyright notices in the Software and this entire statement, 
#   including the above license grant, this restriction and the 
#   following disclaimer, must be included in all copies of the 
#   Software, in whole or in part, and all derivative works of the 
#   Software, unless such copies or derivative works are solely in 
#   the form of machine-executable object code generated by a source 
#   language processor.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
#   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
#   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND 
#   NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR 
#   ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR 
#   OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
#   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
#   OTHER DEALINGS IN THE SOFTWARE, INCLUDING BUT NOT LIMITED TO THE 
#   COMPATIBILITY OF THIS LICENSE WITH OTHER SOFTWARE LICENSES.
#
import sys
import os
import unittest
# Hard code the system path additions
sys.path.append('../lib/')
import libHrlAnalysis
import libHrlAnalysisData

class TestAnalysis(unittest.TestCase):

    def test_neo(self):
        tester = HrlNeuralAnalysisNEO(neo.io.PlexonIO(filename = '../../test/data/NEO/File_plexon_3.plx'))
        tester.buildDataStructures()
        spikes = tester.getSpikeTimes()
        data = libHrlAnalysisData.AnalysisData()
        data.fillRasterData('../../test/data/NEO/neo_plexon.dat')
        self.assertTrue(data.compareRasterDataDim(spikes.time,1))
        self.assertTrue(data.compareRasterDataDim(spikes.spikes,2))
    

# Create a class that inherits from HrlNeuralAnalysis and uses NEO objects.
import neo
import quantities as pq
class HrlNeuralAnalysisNEO(libHrlAnalysis.HrlNeuralAnalysis):
    def __init__(self,neoObj):
        libHrlAnalysis.HrlNeuralAnalysis.__init__(
                                    self,0,0,0,0,libHrlAnalysis.vector_string())
        self.neoObj = neoObj

    def buildDataStructures(self):
        segment = self.neoObj.read_segment(cascade = True, lazy = False)
        currIdx = 0
        startTime = sys.maxint
        endTime = 0

        for cellst in segment.spiketrains:
            cellst.units = pq.ms
            cellst.t_start.units = pq.ms
            cellst.t_stop.units = pq.ms
            startTime = min(startTime,int(cellst.t_start))
            endTime = max(endTime,int(cellst.t_stop))
            self.cellActivity().append(libHrlAnalysis.vector_int())
            for spike in cellst:
                self.cellActivity()[currIdx].append(int(spike))
                self.spikeActivity().append(libHrlAnalysis.int_pair(int(spike),currIdx))
                
            currIdx += 1
        self.sortSpikeActivity()
        self.paramsIn().startIdx = 0;
        self.paramsIn().endIdx = len(segment.spiketrains)
        self.paramsIn().startTime = startTime
        self.paramsIn().endTime = endTime
        self.paramsIn().isDataCompiled = True   
        return True



if __name__ == "__main__":
    unittest.main()

    



    
