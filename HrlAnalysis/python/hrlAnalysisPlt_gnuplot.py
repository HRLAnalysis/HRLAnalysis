#!/usr/bin/python
#
#   HRLAnalysis(TM) Software License - Version 1.0 - August 27th, 2013
#
#   Permission is hereby granted, free of charge, to any person or 
#   organization obtaining a copy of the software and accompanying 
#   documentation covered by this license (the "Software") to use, 
#   reproduce, display, distribute, execute, and transmit the 
#   Software, and to prepare derivative works of the Software, and 
#   to permit third-parties to whom the Software is furnished to do 
#   so, all subject to the following:
#
#   The copyright notices in the Software and this entire statement, 
#   including the above license grant, this restriction and the 
#   following disclaimer, must be included in all copies of the 
#   Software, in whole or in part, and all derivative works of the 
#   Software, unless such copies or derivative works are solely in 
#   the form of machine-executable object code generated by a source 
#   language processor.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
#   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
#   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND 
#   NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR 
#   ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR 
#   OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
#   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
#   OTHER DEALINGS IN THE SOFTWARE, INCLUDING BUT NOT LIMITED TO THE 
#   COMPATIBILITY OF THIS LICENSE WITH OTHER SOFTWARE LICENSES.
#

class spikePlotterGNUPlot:
    
    
    """wrapper class for plotting the hrlAnalysis results."""
    def __init__(self,name,startTime,endTime,startIdx,endIdx):

        self.rows = 0
        self.r = []
        self.bPlotRaster = False
        self.bPlotMean = False
        self.bPlotCOV = False
        
        self.name = name
        self.startTime = startTime
        self.endTime = endTime
        self.startIdx = startIdx
        self.endIdx = endIdx
                
                
    def plotRaster(self,times,spikes):
        r = biggles.FramedPlot()
        r.xrange = self.startTime, self.endTime + 10
        r.yrange = self.startIdx, self.endIdx
        r.xlabel = "Time (ms)"
        r.ylabel = "Cell Index"
        r.add(biggles.Points(times,spikes,type="filled circle"))
        self.r.append(r);
        self.rows += 1
        self.bPlotRaster = True


    def plotRasterNewCells(self,times,spikes,startIdx,endIdx):
        r = biggles.FramedPlot()
        r.xrange = self.startTime, self.endTime + 10
        r.yrange = startIdx, endIdx
        r.xlabel = "Time (ms)"
        r.ylabel = "Cell Index"
        r.add(biggles.Points(times,spikes,type="filled circle"))
        self.r.append(r);
        self.rows += 1
        self.bPlotRaster = True
                
                
    def plotWindowRate(self,rates):
        self.mean = biggles.FramedPlot()
        self.mean.xrange = 0, len(rates) + 1
        self.mean.yrange = 0, max(rates)
        self.mean.xlabel = "Window"
        self.mean.ylabel = "Frequency (Hz)"
        self.mean.add(biggles.Curve(numpy.arange( 0, len(rates)),rates))
        self.rows += 1
        self.bPlotMean = True
        
        
    def plotCOV(self,cells,COV):
        self.cov = biggles.FramedPlot()
        self.cov.xrange = self.startIdx, self.endIdx + 1
        self.cov.yrange = 0, max(COV)
        self.cov.xlabel = "Cell Index"
        self.cov.ylabel = "COV"
        self.cov.add(biggles.Points(cells,COV,type="filled circle"))
        self.rows += 1
        self.bPlotCOV = True
    
    
    def plotCellRates(self,cells,rates):
        pass
        
        
    def plotSpikeBins(self,freqs,counts):
        pass
        
        
    def show(self):
        self.p.show()
    
    
    def savePlot(self,fileName):

        currRow = 0
        Table = biggles.Table(self.rows, 1)

        if self.bPlotRaster:
            for rasterPlot in self.r:
                Table[currRow,0] = rasterPlot
                currRow += 1

        if self.bPlotMean:
            Table[currRow,0] = self.mean
            currRow += 1
                
        if self.bPlotCOV:
            Table[currRow,0] = self.cov
            currRow += 1

        Table.aspect_ratio = 0.5
        Table.write_img(1600,800,fileName)


    def closePlot(self):
        pass

