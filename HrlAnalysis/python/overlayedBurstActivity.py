#!/usr/bin/python
#
#   HRLAnalysis(TM) Software License - Version 1.0 - August 27th, 2013
#
#   Permission is hereby granted, free of charge, to any person or 
#   organization obtaining a copy of the software and accompanying 
#   documentation covered by this license (the "Software") to use, 
#   reproduce, display, distribute, execute, and transmit the 
#   Software, and to prepare derivative works of the Software, and 
#   to permit third-parties to whom the Software is furnished to do 
#   so, all subject to the following:
#
#   The copyright notices in the Software and this entire statement, 
#   including the above license grant, this restriction and the 
#   following disclaimer, must be included in all copies of the 
#   Software, in whole or in part, and all derivative works of the 
#   Software, unless such copies or derivative works are solely in 
#   the form of machine-executable object code generated by a source 
#   language processor.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
#   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
#   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND 
#   NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR 
#   ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR 
#   OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
#   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
#   OTHER DEALINGS IN THE SOFTWARE, INCLUDING BUT NOT LIMITED TO THE 
#   COMPATIBILITY OF THIS LICENSE WITH OTHER SOFTWARE LICENSES.
#
import sys
import os
import re
import argparse
import matplotlib
matplotlib.use('agg')
import matplotlib.pyplot as plt
from matplotlib import ticker


def analyzeData(cellGroup,options,binFiles):

    fileList = libHrlAnalysis.vector_string()
    for f in binFiles:
        fileList.append(f)
    analysis = libHrlAnalysis.HrlNeuralAnalysisHRLSim(
                            options.startTime,options.endTime,
                            cellGroup['startIdx'],cellGroup['endIdx'],
                            fileList)
    analysis.buildDataStructures()

    # Get the Raster Data.
    rasterInfo = analysis.getSpikeTimes()

    if len(rasterInfo.spikes) > 0:
        plt.figure(1, figsize=(16,10), dpi=300)
        ax1 = plt.subplot(111)

        bursts = analysis.getBursting(options.signifigance)
        
        for i,cellBurstInfo in enumerate(bursts):
            print "Cell %d:found %d bursts."%(i,len(cellBurstInfo))
            cellIndex = [i+cellGroup['startIdx'], i+cellGroup['startIdx']]
            for burst in cellBurstInfo:
                burstRange = [burst.start,burst.stop]
                ax1.plot(burstRange, cellIndex, color='r',alpha=0.5,linewidth=3)

        ax1.scatter(rasterInfo.time,rasterInfo.spikes,
                    s=options.markersize,marker = [5,3,0],linewidths = '.1', 
                    color = 'k')
                    
        ax1.set_ylabel('Cell Index',size=24)
        ax1.set_xlabel('Time (ms)',size=24)
        ax1.axes.set_xlim(options.startTime, options.endTime + 10)
        ax1.axes.set_ylim(cellGroup['startIdx']-1, cellGroup['endIdx']+1)
        ax1.grid(False)
        plt.savefig(os.path.join(options.outputPath,cellGroup['name']+'.eps'))
        plt.close()


def getParser():

    parser = argparse.ArgumentParser(
                        description='Analyze HRLSimulator results.')

    parser.add_argument('startTime', metavar='T_start', type=int,
                        help='the time, in ms, to start the analysis.')

    parser.add_argument('endTime', metavar='T_end', type=int,
                        help='the time, in ms, to stop the analysis.')

    config_group = parser.add_argument_group('configuration')

    config_group.add_argument(
                    "-o", "--outputPath", dest="outputPath",
                    action="store",default="../results/",
                    help="Output path to store the plots.", metavar="PATH")

    config_group.add_argument(
                    "-c", "--config", dest="configFileName",
                    action="store",default="../../test/python/analysisConfig",
                    help="Configuration file to import", metavar="FILE")

    config_group.add_argument(
                    "-i", "--includepath", dest="includePath",
                    action="store",default="../lib/",
                    help="Path to the hrlAnalysis libraries.", metavar="PATH")

    config_group.add_argument(
                    "-a", "--searchpath", dest="searchPath",
                    action="store",default="../../test/data/CA1/",
                    help="The directory to search for binary files.", 
                    metavar="PATH")

    config_group.add_argument(
                    "--rateType", dest="windowRateType",
                    action="store",default="guassian",
                    help="The type of analysis to use when calculating the mean spike rate: options are guassian: uses a Guassian weighting function (default).  binned: uses a nonoverlapping moving window", 
                    metavar="TYPE")

    config_group.add_argument(
                    "-w", "--windowsize", dest="WindowSize",
                    action="store",type=int,default=500,
                    help="window size in ms to use for mean spike rate analysis.", 
                    metavar="VAL")

    config_group.add_argument(
                    "-s", "--stepsize", dest="StepSize",
                    action="store",type=int,default=100,
                    help="size in ms to move the mean reate analysis window.", 
                    metavar="VAL")

    config_group.add_argument(
                    "-m", "--markersize", dest="markersize",
                    action="store",type=int,default=5,
                    help="size of the dots for raster plots.", metavar="VAL")

    config_group.add_argument(
                    "--ignoreRate", dest="ignoreRate",
                    action="store_true",default=False,
                    help="Ignore the overlay.")

    return parser


if __name__ == '__main__':
    # Parse the command line.
    parser = getParser()
    options = parser.parse_args()

    # Add the library include path
    sys.path.append(options.includePath)
    # import the analysis library
    import libHrlAnalysis

    # Import the configuration module.
    (directory,fileName) = os.path.split(options.configFileName)
    sys.path.append(dir)
    try:
        exec('from %s import *' % directory)
    except:
        print "Error: Cannot find the requested configuration file: ",fileName
        raise

    # Search for binary files in the search path.
    binFiles = os.listdir(options.searchPath)
    #filterTest = re.compile("spikes\.bin$",re.IGNORECASE)
    filterTest = re.compile("^spikes",re.IGNORECASE)
    binFiles = filter(filterTest.search,binFiles)

    for i in xrange(len(binFiles)):
        binFiles[i] = os.path.join(options.searchPath,binFiles[i])

    # Sort the list of files since some machines will return the files 
    # in reverse order
    binFiles.sort()

    # Get the cell groups and the parameters
    cellGroups = getCellGroups()

    for cells in cellGroups:
        analyzeData(cells,options,binFiles)















        

