#!/usr/bin/python
#
#   HRLAnalysis(TM) Software License - Version 1.0 - August 27th, 2013
#
#   Permission is hereby granted, free of charge, to any person or 
#   organization obtaining a copy of the software and accompanying 
#   documentation covered by this license (the "Software") to use, 
#   reproduce, display, distribute, execute, and transmit the 
#   Software, and to prepare derivative works of the Software, and 
#   to permit third-parties to whom the Software is furnished to do 
#   so, all subject to the following:
#
#   The copyright notices in the Software and this entire statement, 
#   including the above license grant, this restriction and the 
#   following disclaimer, must be included in all copies of the 
#   Software, in whole or in part, and all derivative works of the 
#   Software, unless such copies or derivative works are solely in 
#   the form of machine-executable object code generated by a source 
#   language processor.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
#   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
#   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND 
#   NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR 
#   ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR 
#   OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
#   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
#   OTHER DEALINGS IN THE SOFTWARE, INCLUDING BUT NOT LIMITED TO THE 
#   COMPATIBILITY OF THIS LICENSE WITH OTHER SOFTWARE LICENSES.
#
import numpy as np
import matplotlib
matplotlib.use('Agg') # Tell python to use the Agg backend.
import matplotlib.pyplot as plt
from matplotlib import ticker

class spikePlotter:

    """wrapper class for plotting the hrlAnalysis results."""
    def __init__(self,name,startTime,endTime,startIdx,endIdx):
        plt.figure(1, figsize=(16,10))
        self.name = name
        self.startTime = startTime
        self.endTime = endTime
        self.startIdx = startIdx
        self.endIdx = endIdx
        self.rasterPlt = plt.axes([.05,.35,.6,.6])
        self.windowRatePlt = plt.axes([.05,.05,.6,.25])
        self.covPlt = plt.axes([.7,.35,.1,.6])
        self.cellRatePlt = plt.axes([.85,.35,.1,.6])
        self.spikeBinPlt = plt.axes([.7,.05,.25,.25])
        plt.ioff()

    def plotRaster(self,times,spikes):
        self.rasterPlt.scatter(times,spikes,s=5,marker = [5,3,0],
                               linewidths = '.1', color = 'k')
        self.rasterPlt.set_title('Spikes')
        self.rasterPlt.set_ylabel('Cell Index')
        self.rasterPlt.axes.set_xlim(self.startTime, self.endTime + 10)
        self.rasterPlt.axes.set_ylim(self.startIdx, self.endIdx)
        self.rasterPlt.grid(True)
        
    def plotWindowRate(self,rates):
        self.windowRatePlt.plot(rates, color = 'k')
        self.windowRatePlt.set_xlabel('Window')
        self.windowRatePlt.set_ylabel('Mean Rate (Hz)')
        self.windowRatePlt.grid(True)
        self.windowRatePlt.axes.set_xlim(0,len(rates)+1)
        
    def plotCOV(self,cells,COV):
        self.covPlt.barh(cells,COV, color = 'k')
        font = {'fontsize':10}
        self.covPlt.set_title('COV', **font)
        self.covPlt.axes.set_ylim(self.startIdx, self.endIdx + 10)
        self.covPlt.axes.set_xlim(0,max(COV)+0.1)
    
    def plotCellRates(self,cells,rates):
        self.cellRatePlt.barh(cells,rates, color = 'k')
        font = {'fontsize':10}
        self.cellRatePlt.set_title('Spike Rates', **font)
        self.cellRatePlt.axes.set_ylim(self.startIdx, self.endIdx + 10)
        self.cellRatePlt.axes.set_xlim(0,max(rates)+0.1)
        
    def plotSpikeBins(self,freqs,counts):
        self.spikeBinPlt.bar(freqs,counts,linewidth=0, color = 'k')
        font = {'fontsize':10}
        self.spikeBinPlt.set_title('Histogram', **font)
        self.spikeBinPlt.set_ylabel('Cell Count')
        self.spikeBinPlt.set_xlabel('Frequency (Hz)')
        self.spikeBinPlt.axes.set_ylim(0, max(counts))
        self.spikeBinPlt.axes.set_xlim(0, max(freqs))
        
    def show(self):
        plt.show()
    
    def savePlot(self,fileName):
        plt.savefig(fileName)

    def closePlot(self):
        plt.close()
